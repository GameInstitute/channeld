// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.0
// source: channeld.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BroadcastType int32

const (
	// No broadcast. All internal messages should use this type, and other types are ignored.
	BroadcastType_NO BroadcastType = 0
	// Broadcast the message to all the connections in the channel, the sender included.
	BroadcastType_ALL BroadcastType = 1
	// Broadcast the message to all the connections in the channel, the sender excluded.
	BroadcastType_ALL_BUT_SENDER BroadcastType = 2
	// Forward the packet to the connection. Can only be used by the backend server. The channelId in the packet will then be used as the target connectionId.
	// This has the same behavior as sending the packet to the PRIVATE channel owned by the target connection with BroadcastType = NO, but is less efficient as the message will be handled in the global channel.
	BroadcastType_SINGLE_CONNECTION BroadcastType = 3
)

// Enum value maps for BroadcastType.
var (
	BroadcastType_name = map[int32]string{
		0: "NO",
		1: "ALL",
		2: "ALL_BUT_SENDER",
		3: "SINGLE_CONNECTION",
	}
	BroadcastType_value = map[string]int32{
		"NO":                0,
		"ALL":               1,
		"ALL_BUT_SENDER":    2,
		"SINGLE_CONNECTION": 3,
	}
)

func (x BroadcastType) Enum() *BroadcastType {
	p := new(BroadcastType)
	*p = x
	return p
}

func (x BroadcastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastType) Descriptor() protoreflect.EnumDescriptor {
	return file_channeld_proto_enumTypes[0].Descriptor()
}

func (BroadcastType) Type() protoreflect.EnumType {
	return &file_channeld_proto_enumTypes[0]
}

func (x BroadcastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadcastType.Descriptor instead.
func (BroadcastType) EnumDescriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{0}
}

type ChannelType int32

const (
	ChannelType_UNKNOWN  ChannelType = 0
	ChannelType_GLOBAL   ChannelType = 1   // Default channel. Any message without ChannelId specified will be sent to this channel.
	ChannelType_PRIVATE  ChannelType = 2   // Per-connection channel. Useful to store the user data and subscribe the client to the data update.
	ChannelType_SUBWORLD ChannelType = 3   // A game "room" in a session-based game, or a level in an MMORPG. Subworlds are spatially divided thus the interests are isolated.
	ChannelType_SPATIAL  ChannelType = 4   // Spatial channels are spatailly connected. Using this channel to implement a seamless open world.
	ChannelType_TEST     ChannelType = 100 // The following are for tests.
	ChannelType_TEST1    ChannelType = 101
	ChannelType_TEST2    ChannelType = 102
	ChannelType_TEST3    ChannelType = 103
	ChannelType_TEST4    ChannelType = 104
)

// Enum value maps for ChannelType.
var (
	ChannelType_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "GLOBAL",
		2:   "PRIVATE",
		3:   "SUBWORLD",
		4:   "SPATIAL",
		100: "TEST",
		101: "TEST1",
		102: "TEST2",
		103: "TEST3",
		104: "TEST4",
	}
	ChannelType_value = map[string]int32{
		"UNKNOWN":  0,
		"GLOBAL":   1,
		"PRIVATE":  2,
		"SUBWORLD": 3,
		"SPATIAL":  4,
		"TEST":     100,
		"TEST1":    101,
		"TEST2":    102,
		"TEST3":    103,
		"TEST4":    104,
	}
)

func (x ChannelType) Enum() *ChannelType {
	p := new(ChannelType)
	*p = x
	return p
}

func (x ChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_channeld_proto_enumTypes[1].Descriptor()
}

func (ChannelType) Type() protoreflect.EnumType {
	return &file_channeld_proto_enumTypes[1]
}

func (x ChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelType.Descriptor instead.
func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{1}
}

type MessageType int32

const (
	MessageType_INVALID MessageType = 0
	MessageType_AUTH    MessageType = 1
	//AUTH_RESULT = 2;
	MessageType_CREATE_CHANNEL      MessageType = 3
	MessageType_REMOVE_CHANNEL      MessageType = 4
	MessageType_LIST_CHANNEL        MessageType = 5
	MessageType_SUB_TO_CHANNEL      MessageType = 6
	MessageType_UNSUB_FROM_CHANNEL  MessageType = 7
	MessageType_CHANNEL_DATA_UPDATE MessageType = 8
	MessageType_DISCONNECT          MessageType = 9
	MessageType_USER_SPACE_START    MessageType = 100
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:   "INVALID",
		1:   "AUTH",
		3:   "CREATE_CHANNEL",
		4:   "REMOVE_CHANNEL",
		5:   "LIST_CHANNEL",
		6:   "SUB_TO_CHANNEL",
		7:   "UNSUB_FROM_CHANNEL",
		8:   "CHANNEL_DATA_UPDATE",
		9:   "DISCONNECT",
		100: "USER_SPACE_START",
	}
	MessageType_value = map[string]int32{
		"INVALID":             0,
		"AUTH":                1,
		"CREATE_CHANNEL":      3,
		"REMOVE_CHANNEL":      4,
		"LIST_CHANNEL":        5,
		"SUB_TO_CHANNEL":      6,
		"UNSUB_FROM_CHANNEL":  7,
		"CHANNEL_DATA_UPDATE": 8,
		"DISCONNECT":          9,
		"USER_SPACE_START":    100,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_channeld_proto_enumTypes[2].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_channeld_proto_enumTypes[2]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{2}
}

type AuthResultMessage_AuthResult int32

const (
	AuthResultMessage_SUCCESSFUL  AuthResultMessage_AuthResult = 0
	AuthResultMessage_INVALID_PIT AuthResultMessage_AuthResult = 1
	AuthResultMessage_INVALID_LT  AuthResultMessage_AuthResult = 2
)

// Enum value maps for AuthResultMessage_AuthResult.
var (
	AuthResultMessage_AuthResult_name = map[int32]string{
		0: "SUCCESSFUL",
		1: "INVALID_PIT",
		2: "INVALID_LT",
	}
	AuthResultMessage_AuthResult_value = map[string]int32{
		"SUCCESSFUL":  0,
		"INVALID_PIT": 1,
		"INVALID_LT":  2,
	}
)

func (x AuthResultMessage_AuthResult) Enum() *AuthResultMessage_AuthResult {
	p := new(AuthResultMessage_AuthResult)
	*p = x
	return p
}

func (x AuthResultMessage_AuthResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthResultMessage_AuthResult) Descriptor() protoreflect.EnumDescriptor {
	return file_channeld_proto_enumTypes[3].Descriptor()
}

func (AuthResultMessage_AuthResult) Type() protoreflect.EnumType {
	return &file_channeld_proto_enumTypes[3]
}

func (x AuthResultMessage_AuthResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthResultMessage_AuthResult.Descriptor instead.
func (AuthResultMessage_AuthResult) EnumDescriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{4, 0}
}

// The data packet that is sent between the endpoints. A packet can have multiple messages in the payload in one trip to improve the efficiency.
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*MessagePack `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetMessages() []*MessagePack {
	if x != nil {
		return x.Messages
	}
	return nil
}

// The serialized message and the context of it.
type MessagePack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel that the message is sent to.
	// 0 means the message should be handled in the global channel (e.g. a @CreateChannel message)
	ChannelId uint32 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	// Will the message be broadcasted to all connections in the channel?
	// ONLY works for the user-space messages.
	Broadcast BroadcastType `protobuf:"varint,2,opt,name=broadcast,proto3,enum=channeld.BroadcastType" json:"broadcast,omitempty"`
	// The stub for RPC callbacks.
	// 0 means the packet is not a RPC message.
	StubId uint32 `protobuf:"varint,3,opt,name=stubId,proto3" json:"stubId,omitempty"`
	// The MessageType either defined in @MessageType enum, or defined in user space.
	MsgType uint32 `protobuf:"varint,4,opt,name=msgType,proto3" json:"msgType,omitempty"`
	// The serialized message. It's Protobuf-marshalled byte array if the message is defined in @MessageType.
	MsgBody []byte `protobuf:"bytes,5,opt,name=msgBody,proto3" json:"msgBody,omitempty"`
}

func (x *MessagePack) Reset() {
	*x = MessagePack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePack) ProtoMessage() {}

func (x *MessagePack) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePack.ProtoReflect.Descriptor instead.
func (*MessagePack) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{1}
}

func (x *MessagePack) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessagePack) GetBroadcast() BroadcastType {
	if x != nil {
		return x.Broadcast
	}
	return BroadcastType_NO
}

func (x *MessagePack) GetStubId() uint32 {
	if x != nil {
		return x.StubId
	}
	return 0
}

func (x *MessagePack) GetMsgType() uint32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *MessagePack) GetMsgBody() []byte {
	if x != nil {
		return x.MsgBody
	}
	return nil
}

// Messages that are not handled in channeld. DO NOT send this message directly to channeld, as channeld uses it to wrap the payload and forward it to the target endpoint(s).
type UserSpaceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The backend server generally needs the client connId to identify the sender.
	SourceConnId uint32 `protobuf:"varint,1,opt,name=sourceConnId,proto3" json:"sourceConnId,omitempty"`
	// The user (client/server) decides to how serialize/deserialize the message.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UserSpaceMessage) Reset() {
	*x = UserSpaceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSpaceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSpaceMessage) ProtoMessage() {}

func (x *UserSpaceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSpaceMessage.ProtoReflect.Descriptor instead.
func (*UserSpaceMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{2}
}

func (x *UserSpaceMessage) GetSourceConnId() uint32 {
	if x != nil {
		return x.SourceConnId
	}
	return 0
}

func (x *UserSpaceMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// The packet should have channelId = 0 in order to be handled.
// Response: @AuthResultMessage
type AuthMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerIdentifierToken string `protobuf:"bytes,1,opt,name=playerIdentifierToken,proto3" json:"playerIdentifierToken,omitempty"`
	LoginToken            string `protobuf:"bytes,2,opt,name=loginToken,proto3" json:"loginToken,omitempty"`
}

func (x *AuthMessage) Reset() {
	*x = AuthMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthMessage) ProtoMessage() {}

func (x *AuthMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthMessage.ProtoReflect.Descriptor instead.
func (*AuthMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{3}
}

func (x *AuthMessage) GetPlayerIdentifierToken() string {
	if x != nil {
		return x.PlayerIdentifierToken
	}
	return ""
}

func (x *AuthMessage) GetLoginToken() string {
	if x != nil {
		return x.LoginToken
	}
	return ""
}

type AuthResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result AuthResultMessage_AuthResult `protobuf:"varint,1,opt,name=result,proto3,enum=channeld.AuthResultMessage_AuthResult" json:"result,omitempty"`
	ConnId uint32                       `protobuf:"varint,2,opt,name=connId,proto3" json:"connId,omitempty"`
}

func (x *AuthResultMessage) Reset() {
	*x = AuthResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthResultMessage) ProtoMessage() {}

func (x *AuthResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthResultMessage.ProtoReflect.Descriptor instead.
func (*AuthResultMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{4}
}

func (x *AuthResultMessage) GetResult() AuthResultMessage_AuthResult {
	if x != nil {
		return x.Result
	}
	return AuthResultMessage_SUCCESSFUL
}

func (x *AuthResultMessage) GetConnId() uint32 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

type ChannelSubscriptionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanUpdateData    bool     `protobuf:"varint,1,opt,name=CanUpdateData,proto3" json:"CanUpdateData,omitempty"`
	DataFieldMasks   []string `protobuf:"bytes,2,rep,name=DataFieldMasks,proto3" json:"DataFieldMasks,omitempty"`
	FanOutIntervalMs uint32   `protobuf:"varint,3,opt,name=FanOutIntervalMs,proto3" json:"FanOutIntervalMs,omitempty"`
}

func (x *ChannelSubscriptionOptions) Reset() {
	*x = ChannelSubscriptionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSubscriptionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSubscriptionOptions) ProtoMessage() {}

func (x *ChannelSubscriptionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSubscriptionOptions.ProtoReflect.Descriptor instead.
func (*ChannelSubscriptionOptions) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{5}
}

func (x *ChannelSubscriptionOptions) GetCanUpdateData() bool {
	if x != nil {
		return x.CanUpdateData
	}
	return false
}

func (x *ChannelSubscriptionOptions) GetDataFieldMasks() []string {
	if x != nil {
		return x.DataFieldMasks
	}
	return nil
}

func (x *ChannelSubscriptionOptions) GetFanOutIntervalMs() uint32 {
	if x != nil {
		return x.FanOutIntervalMs
	}
	return 0
}

// The packet should have channelId = 0 in order to be handled.
// Response: @CreateChannelResultMessage. The channelId in the response MessagePack corresponds to the created channel.
type CreateChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType ChannelType                 `protobuf:"varint,1,opt,name=channelType,proto3,enum=channeld.ChannelType" json:"channelType,omitempty"`
	Metadata    string                      `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SubOptions  *ChannelSubscriptionOptions `protobuf:"bytes,3,opt,name=subOptions,proto3" json:"subOptions,omitempty"`
	Data        *anypb.Any                  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateChannelMessage) Reset() {
	*x = CreateChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelMessage) ProtoMessage() {}

func (x *CreateChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelMessage.ProtoReflect.Descriptor instead.
func (*CreateChannelMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{6}
}

func (x *CreateChannelMessage) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_UNKNOWN
}

func (x *CreateChannelMessage) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *CreateChannelMessage) GetSubOptions() *ChannelSubscriptionOptions {
	if x != nil {
		return x.SubOptions
	}
	return nil
}

func (x *CreateChannelMessage) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateChannelResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType ChannelType `protobuf:"varint,1,opt,name=channelType,proto3,enum=channeld.ChannelType" json:"channelType,omitempty"`
	OwnerConnId uint32      `protobuf:"varint,2,opt,name=ownerConnId,proto3" json:"ownerConnId,omitempty"`
}

func (x *CreateChannelResultMessage) Reset() {
	*x = CreateChannelResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelResultMessage) ProtoMessage() {}

func (x *CreateChannelResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelResultMessage.ProtoReflect.Descriptor instead.
func (*CreateChannelResultMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{7}
}

func (x *CreateChannelResultMessage) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_UNKNOWN
}

func (x *CreateChannelResultMessage) GetOwnerConnId() uint32 {
	if x != nil {
		return x.OwnerConnId
	}
	return 0
}

// The packet should have channelId = 0 in order to be handled.
// Response: all connections in the channel will receive @RemoveChannelMessage
type RemoveChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint32 `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (x *RemoveChannelMessage) Reset() {
	*x = RemoveChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChannelMessage) ProtoMessage() {}

func (x *RemoveChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChannelMessage.ProtoReflect.Descriptor instead.
func (*RemoveChannelMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveChannelMessage) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// The packet should have channelId = 0 in order to be handled.
// Response: @ListChannelResultMessage
type ListChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeFilter      ChannelType `protobuf:"varint,1,opt,name=typeFilter,proto3,enum=channeld.ChannelType" json:"typeFilter,omitempty"`
	MetadataFilters []string    `protobuf:"bytes,2,rep,name=metadataFilters,proto3" json:"metadataFilters,omitempty"`
}

func (x *ListChannelMessage) Reset() {
	*x = ListChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChannelMessage) ProtoMessage() {}

func (x *ListChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChannelMessage.ProtoReflect.Descriptor instead.
func (*ListChannelMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{9}
}

func (x *ListChannelMessage) GetTypeFilter() ChannelType {
	if x != nil {
		return x.TypeFilter
	}
	return ChannelType_UNKNOWN
}

func (x *ListChannelMessage) GetMetadataFilters() []string {
	if x != nil {
		return x.MetadataFilters
	}
	return nil
}

type ListChannelResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []*ListChannelResultMessage_ChannelInfo `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *ListChannelResultMessage) Reset() {
	*x = ListChannelResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChannelResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChannelResultMessage) ProtoMessage() {}

func (x *ListChannelResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChannelResultMessage.ProtoReflect.Descriptor instead.
func (*ListChannelResultMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{10}
}

func (x *ListChannelResultMessage) GetChannels() []*ListChannelResultMessage_ChannelInfo {
	if x != nil {
		return x.Channels
	}
	return nil
}

// Response: @SubscribedToChannelResultMessage. The message sender, the subscribed connection, and the channel owner will receive the message respectively.
type SubscribedToChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection to be added to the channel is not necessarily the one sends the message
	ConnId     uint32                      `protobuf:"varint,1,opt,name=connId,proto3" json:"connId,omitempty"`
	SubOptions *ChannelSubscriptionOptions `protobuf:"bytes,2,opt,name=subOptions,proto3" json:"subOptions,omitempty"`
}

func (x *SubscribedToChannelMessage) Reset() {
	*x = SubscribedToChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribedToChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribedToChannelMessage) ProtoMessage() {}

func (x *SubscribedToChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribedToChannelMessage.ProtoReflect.Descriptor instead.
func (*SubscribedToChannelMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribedToChannelMessage) GetConnId() uint32 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

func (x *SubscribedToChannelMessage) GetSubOptions() *ChannelSubscriptionOptions {
	if x != nil {
		return x.SubOptions
	}
	return nil
}

type SubscribedToChannelResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection that subsribed.
	ConnId      uint32      `protobuf:"varint,1,opt,name=connId,proto3" json:"connId,omitempty"`
	ChannelType ChannelType `protobuf:"varint,2,opt,name=channelType,proto3,enum=channeld.ChannelType" json:"channelType,omitempty"`
}

func (x *SubscribedToChannelResultMessage) Reset() {
	*x = SubscribedToChannelResultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribedToChannelResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribedToChannelResultMessage) ProtoMessage() {}

func (x *SubscribedToChannelResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribedToChannelResultMessage.ProtoReflect.Descriptor instead.
func (*SubscribedToChannelResultMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{12}
}

func (x *SubscribedToChannelResultMessage) GetConnId() uint32 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

func (x *SubscribedToChannelResultMessage) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_UNKNOWN
}

// Response: @UnsubscribedFromChannelMessage. The message sender, the subscribed connection, and the channel owner will receive the message respectively.
type UnsubscribedFromChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnId uint32 `protobuf:"varint,1,opt,name=connId,proto3" json:"connId,omitempty"`
}

func (x *UnsubscribedFromChannelMessage) Reset() {
	*x = UnsubscribedFromChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribedFromChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribedFromChannelMessage) ProtoMessage() {}

func (x *UnsubscribedFromChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribedFromChannelMessage.ProtoReflect.Descriptor instead.
func (*UnsubscribedFromChannelMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{13}
}

func (x *UnsubscribedFromChannelMessage) GetConnId() uint32 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

// Response: no. Each connection in the channel receives the @ChannelDataUpdateMessage in every @ChannelSubscriptionOptions.FanOutIntervalMs
type ChannelDataUpdateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *anypb.Any `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ChannelDataUpdateMessage) Reset() {
	*x = ChannelDataUpdateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDataUpdateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDataUpdateMessage) ProtoMessage() {}

func (x *ChannelDataUpdateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDataUpdateMessage.ProtoReflect.Descriptor instead.
func (*ChannelDataUpdateMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{14}
}

func (x *ChannelDataUpdateMessage) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// Disconnect another connection from channeld.
// This message should only be sent by the server connection in a server-authoratative environment.
// The packet should have channelId = 0 in order to be handled.
// Response: no.
type DisconnectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnId uint32 `protobuf:"varint,1,opt,name=connId,proto3" json:"connId,omitempty"`
}

func (x *DisconnectMessage) Reset() {
	*x = DisconnectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectMessage) ProtoMessage() {}

func (x *DisconnectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectMessage.ProtoReflect.Descriptor instead.
func (*DisconnectMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{15}
}

func (x *DisconnectMessage) GetConnId() uint32 {
	if x != nil {
		return x.ConnId
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{16}
}

func (x *Location) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Location) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Location) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type SpatialEntityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loc *Location `protobuf:"bytes,1,opt,name=loc,proto3" json:"loc,omitempty"`
}

func (x *SpatialEntityInfo) Reset() {
	*x = SpatialEntityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpatialEntityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpatialEntityInfo) ProtoMessage() {}

func (x *SpatialEntityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpatialEntityInfo.ProtoReflect.Descriptor instead.
func (*SpatialEntityInfo) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{17}
}

func (x *SpatialEntityInfo) GetLoc() *Location {
	if x != nil {
		return x.Loc
	}
	return nil
}

type SpatialChannelDataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities map[uint32]*SpatialEntityInfo `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpatialChannelDataMessage) Reset() {
	*x = SpatialChannelDataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpatialChannelDataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpatialChannelDataMessage) ProtoMessage() {}

func (x *SpatialChannelDataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpatialChannelDataMessage.ProtoReflect.Descriptor instead.
func (*SpatialChannelDataMessage) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{18}
}

func (x *SpatialChannelDataMessage) GetEntities() map[uint32]*SpatialEntityInfo {
	if x != nil {
		return x.Entities
	}
	return nil
}

type ListChannelResultMessage_ChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   uint32      `protobuf:"varint,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ChannelType ChannelType `protobuf:"varint,2,opt,name=channelType,proto3,enum=channeld.ChannelType" json:"channelType,omitempty"`
	Metadata    string      `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ListChannelResultMessage_ChannelInfo) Reset() {
	*x = ListChannelResultMessage_ChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_channeld_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChannelResultMessage_ChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChannelResultMessage_ChannelInfo) ProtoMessage() {}

func (x *ListChannelResultMessage_ChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_channeld_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChannelResultMessage_ChannelInfo.ProtoReflect.Descriptor instead.
func (*ListChannelResultMessage_ChannelInfo) Descriptor() ([]byte, []int) {
	return file_channeld_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListChannelResultMessage_ChannelInfo) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ListChannelResultMessage_ChannelInfo) GetChannelType() ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelType_UNKNOWN
}

func (x *ListChannelResultMessage_ChannelInfo) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

var File_channeld_proto protoreflect.FileDescriptor

var file_channeld_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x31, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x75, 0x62, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x75, 0x62, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x22, 0x50, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x63, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x11, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x46, 0x55, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4c, 0x54, 0x10, 0x02, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43,
	0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x46, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73,
	0x22, 0xdb, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x77,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x75, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x80, 0x01,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x7a, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x73, 0x0a, 0x20,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x38, 0x0a, 0x1e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x18, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x2b, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x22, 0x34,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x7a, 0x22, 0x39, 0x0a, 0x11, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x6f, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x22,
	0xc4, 0x01, 0x0a, 0x19, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x53, 0x70, 0x61, 0x74, 0x69,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0d,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x4b, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x5f,
	0x42, 0x55, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42,
	0x57, 0x4f, 0x52, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x41, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x64, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x45, 0x53, 0x54, 0x31, 0x10, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x53,
	0x54, 0x32, 0x10, 0x66, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x53, 0x54, 0x33, 0x10, 0x67, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x45, 0x53, 0x54, 0x34, 0x10, 0x68, 0x2a, 0xc9, 0x01, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x48, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x06, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x64, 0x42, 0x08, 0x5a, 0x06, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_channeld_proto_rawDescOnce sync.Once
	file_channeld_proto_rawDescData = file_channeld_proto_rawDesc
)

func file_channeld_proto_rawDescGZIP() []byte {
	file_channeld_proto_rawDescOnce.Do(func() {
		file_channeld_proto_rawDescData = protoimpl.X.CompressGZIP(file_channeld_proto_rawDescData)
	})
	return file_channeld_proto_rawDescData
}

var file_channeld_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_channeld_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_channeld_proto_goTypes = []interface{}{
	(BroadcastType)(0),                           // 0: channeld.BroadcastType
	(ChannelType)(0),                             // 1: channeld.ChannelType
	(MessageType)(0),                             // 2: channeld.MessageType
	(AuthResultMessage_AuthResult)(0),            // 3: channeld.AuthResultMessage.AuthResult
	(*Packet)(nil),                               // 4: channeld.Packet
	(*MessagePack)(nil),                          // 5: channeld.MessagePack
	(*UserSpaceMessage)(nil),                     // 6: channeld.UserSpaceMessage
	(*AuthMessage)(nil),                          // 7: channeld.AuthMessage
	(*AuthResultMessage)(nil),                    // 8: channeld.AuthResultMessage
	(*ChannelSubscriptionOptions)(nil),           // 9: channeld.ChannelSubscriptionOptions
	(*CreateChannelMessage)(nil),                 // 10: channeld.CreateChannelMessage
	(*CreateChannelResultMessage)(nil),           // 11: channeld.CreateChannelResultMessage
	(*RemoveChannelMessage)(nil),                 // 12: channeld.RemoveChannelMessage
	(*ListChannelMessage)(nil),                   // 13: channeld.ListChannelMessage
	(*ListChannelResultMessage)(nil),             // 14: channeld.ListChannelResultMessage
	(*SubscribedToChannelMessage)(nil),           // 15: channeld.SubscribedToChannelMessage
	(*SubscribedToChannelResultMessage)(nil),     // 16: channeld.SubscribedToChannelResultMessage
	(*UnsubscribedFromChannelMessage)(nil),       // 17: channeld.UnsubscribedFromChannelMessage
	(*ChannelDataUpdateMessage)(nil),             // 18: channeld.ChannelDataUpdateMessage
	(*DisconnectMessage)(nil),                    // 19: channeld.DisconnectMessage
	(*Location)(nil),                             // 20: channeld.Location
	(*SpatialEntityInfo)(nil),                    // 21: channeld.SpatialEntityInfo
	(*SpatialChannelDataMessage)(nil),            // 22: channeld.SpatialChannelDataMessage
	(*ListChannelResultMessage_ChannelInfo)(nil), // 23: channeld.ListChannelResultMessage.ChannelInfo
	nil,               // 24: channeld.SpatialChannelDataMessage.EntitiesEntry
	(*anypb.Any)(nil), // 25: google.protobuf.Any
}
var file_channeld_proto_depIdxs = []int32{
	5,  // 0: channeld.Packet.messages:type_name -> channeld.MessagePack
	0,  // 1: channeld.MessagePack.broadcast:type_name -> channeld.BroadcastType
	3,  // 2: channeld.AuthResultMessage.result:type_name -> channeld.AuthResultMessage.AuthResult
	1,  // 3: channeld.CreateChannelMessage.channelType:type_name -> channeld.ChannelType
	9,  // 4: channeld.CreateChannelMessage.subOptions:type_name -> channeld.ChannelSubscriptionOptions
	25, // 5: channeld.CreateChannelMessage.data:type_name -> google.protobuf.Any
	1,  // 6: channeld.CreateChannelResultMessage.channelType:type_name -> channeld.ChannelType
	1,  // 7: channeld.ListChannelMessage.typeFilter:type_name -> channeld.ChannelType
	23, // 8: channeld.ListChannelResultMessage.channels:type_name -> channeld.ListChannelResultMessage.ChannelInfo
	9,  // 9: channeld.SubscribedToChannelMessage.subOptions:type_name -> channeld.ChannelSubscriptionOptions
	1,  // 10: channeld.SubscribedToChannelResultMessage.channelType:type_name -> channeld.ChannelType
	25, // 11: channeld.ChannelDataUpdateMessage.data:type_name -> google.protobuf.Any
	20, // 12: channeld.SpatialEntityInfo.loc:type_name -> channeld.Location
	24, // 13: channeld.SpatialChannelDataMessage.entities:type_name -> channeld.SpatialChannelDataMessage.EntitiesEntry
	1,  // 14: channeld.ListChannelResultMessage.ChannelInfo.channelType:type_name -> channeld.ChannelType
	21, // 15: channeld.SpatialChannelDataMessage.EntitiesEntry.value:type_name -> channeld.SpatialEntityInfo
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_channeld_proto_init() }
func file_channeld_proto_init() {
	if File_channeld_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_channeld_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSpaceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelSubscriptionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChannelResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribedToChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribedToChannelResultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribedFromChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDataUpdateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpatialEntityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpatialChannelDataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_channeld_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChannelResultMessage_ChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_channeld_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_channeld_proto_goTypes,
		DependencyIndexes: file_channeld_proto_depIdxs,
		EnumInfos:         file_channeld_proto_enumTypes,
		MessageInfos:      file_channeld_proto_msgTypes,
	}.Build()
	File_channeld_proto = out.File
	file_channeld_proto_rawDesc = nil
	file_channeld_proto_goTypes = nil
	file_channeld_proto_depIdxs = nil
}
