// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: unreal_common.proto

package unrealpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Maps to UE's FVector AND FRotator struct.
// For FRotator, x = pitch, y = yaw, z = roll
type FVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x,proto3,oneof" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y,proto3,oneof" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z,proto3,oneof" json:"z,omitempty"`
}

func (x *FVector) Reset() {
	*x = FVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FVector) ProtoMessage() {}

func (x *FVector) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FVector.ProtoReflect.Descriptor instead.
func (*FVector) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{0}
}

func (x *FVector) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *FVector) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *FVector) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type UnrealObjectRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetGUID      *uint32                             `protobuf:"varint,1,opt,name=netGUID,proto3,oneof" json:"netGUID,omitempty"`
	Context      []*UnrealObjectRef_GuidCachedObject `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	NetGUIDBunch []byte                              `protobuf:"bytes,3,opt,name=netGUIDBunch,proto3,oneof" json:"netGUIDBunch,omitempty"`
	BunchBitsNum *uint32                             `protobuf:"varint,4,opt,name=bunchBitsNum,proto3,oneof" json:"bunchBitsNum,omitempty"`
}

func (x *UnrealObjectRef) Reset() {
	*x = UnrealObjectRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnrealObjectRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnrealObjectRef) ProtoMessage() {}

func (x *UnrealObjectRef) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnrealObjectRef.ProtoReflect.Descriptor instead.
func (*UnrealObjectRef) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{1}
}

func (x *UnrealObjectRef) GetNetGUID() uint32 {
	if x != nil && x.NetGUID != nil {
		return *x.NetGUID
	}
	return 0
}

func (x *UnrealObjectRef) GetContext() []*UnrealObjectRef_GuidCachedObject {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UnrealObjectRef) GetNetGUIDBunch() []byte {
	if x != nil {
		return x.NetGUIDBunch
	}
	return nil
}

func (x *UnrealObjectRef) GetBunchBitsNum() uint32 {
	if x != nil && x.BunchBitsNum != nil {
		return *x.BunchBitsNum
	}
	return 0
}

type ActorComponentRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner    *UnrealObjectRef `protobuf:"bytes,1,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	CompName *string          `protobuf:"bytes,2,opt,name=compName,proto3,oneof" json:"compName,omitempty"`
}

func (x *ActorComponentRef) Reset() {
	*x = ActorComponentRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorComponentRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorComponentRef) ProtoMessage() {}

func (x *ActorComponentRef) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorComponentRef.ProtoReflect.Descriptor instead.
func (*ActorComponentRef) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{2}
}

func (x *ActorComponentRef) GetOwner() *UnrealObjectRef {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ActorComponentRef) GetCompName() string {
	if x != nil && x.CompName != nil {
		return *x.CompName
	}
	return ""
}

type RemoteFunctionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetObj     *UnrealObjectRef `protobuf:"bytes,1,opt,name=targetObj,proto3" json:"targetObj,omitempty"`
	FunctionName  string           `protobuf:"bytes,2,opt,name=functionName,proto3" json:"functionName,omitempty"`
	ParamsPayload []byte           `protobuf:"bytes,3,opt,name=paramsPayload,proto3" json:"paramsPayload,omitempty"`
}

func (x *RemoteFunctionMessage) Reset() {
	*x = RemoteFunctionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteFunctionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteFunctionMessage) ProtoMessage() {}

func (x *RemoteFunctionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteFunctionMessage.ProtoReflect.Descriptor instead.
func (*RemoteFunctionMessage) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{3}
}

func (x *RemoteFunctionMessage) GetTargetObj() *UnrealObjectRef {
	if x != nil {
		return x.TargetObj
	}
	return nil
}

func (x *RemoteFunctionMessage) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *RemoteFunctionMessage) GetParamsPayload() []byte {
	if x != nil {
		return x.ParamsPayload
	}
	return nil
}

type SpawnObjectMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj       *UnrealObjectRef `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
	LocalRole *uint32          `protobuf:"varint,2,opt,name=localRole,proto3,oneof" json:"localRole,omitempty"`
}

func (x *SpawnObjectMessage) Reset() {
	*x = SpawnObjectMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpawnObjectMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnObjectMessage) ProtoMessage() {}

func (x *SpawnObjectMessage) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnObjectMessage.ProtoReflect.Descriptor instead.
func (*SpawnObjectMessage) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{4}
}

func (x *SpawnObjectMessage) GetObj() *UnrealObjectRef {
	if x != nil {
		return x.Obj
	}
	return nil
}

func (x *SpawnObjectMessage) GetLocalRole() uint32 {
	if x != nil && x.LocalRole != nil {
		return *x.LocalRole
	}
	return 0
}

type FRepMovement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinearVelocity        *FVector `protobuf:"bytes,1,opt,name=linearVelocity,proto3,oneof" json:"linearVelocity,omitempty"`
	AngularVelocity       *FVector `protobuf:"bytes,2,opt,name=angularVelocity,proto3,oneof" json:"angularVelocity,omitempty"`
	Location              *FVector `protobuf:"bytes,3,opt,name=location,proto3,oneof" json:"location,omitempty"`
	Rotation              *FVector `protobuf:"bytes,4,opt,name=rotation,proto3,oneof" json:"rotation,omitempty"`
	BSimulatedPhysicSleep *bool    `protobuf:"varint,5,opt,name=bSimulatedPhysicSleep,proto3,oneof" json:"bSimulatedPhysicSleep,omitempty"`
	BRepPhysics           *bool    `protobuf:"varint,6,opt,name=bRepPhysics,proto3,oneof" json:"bRepPhysics,omitempty"`
}

func (x *FRepMovement) Reset() {
	*x = FRepMovement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRepMovement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRepMovement) ProtoMessage() {}

func (x *FRepMovement) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRepMovement.ProtoReflect.Descriptor instead.
func (*FRepMovement) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{5}
}

func (x *FRepMovement) GetLinearVelocity() *FVector {
	if x != nil {
		return x.LinearVelocity
	}
	return nil
}

func (x *FRepMovement) GetAngularVelocity() *FVector {
	if x != nil {
		return x.AngularVelocity
	}
	return nil
}

func (x *FRepMovement) GetLocation() *FVector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FRepMovement) GetRotation() *FVector {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *FRepMovement) GetBSimulatedPhysicSleep() bool {
	if x != nil && x.BSimulatedPhysicSleep != nil {
		return *x.BSimulatedPhysicSleep
	}
	return false
}

func (x *FRepMovement) GetBRepPhysics() bool {
	if x != nil && x.BRepPhysics != nil {
		return *x.BRepPhysics
	}
	return false
}

type FRepAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachParent    *UnrealObjectRef   `protobuf:"bytes,1,opt,name=attachParent,proto3" json:"attachParent,omitempty"`
	LocationOffset  *FVector           `protobuf:"bytes,2,opt,name=locationOffset,proto3" json:"locationOffset,omitempty"`
	RelativeScale   *FVector           `protobuf:"bytes,3,opt,name=relativeScale,proto3" json:"relativeScale,omitempty"`
	RotationOffset  *FVector           `protobuf:"bytes,4,opt,name=rotationOffset,proto3" json:"rotationOffset,omitempty"`
	AttachSocket    string             `protobuf:"bytes,5,opt,name=attachSocket,proto3" json:"attachSocket,omitempty"`
	AttachComponent *ActorComponentRef `protobuf:"bytes,6,opt,name=attachComponent,proto3" json:"attachComponent,omitempty"`
}

func (x *FRepAttachment) Reset() {
	*x = FRepAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRepAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRepAttachment) ProtoMessage() {}

func (x *FRepAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRepAttachment.ProtoReflect.Descriptor instead.
func (*FRepAttachment) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{6}
}

func (x *FRepAttachment) GetAttachParent() *UnrealObjectRef {
	if x != nil {
		return x.AttachParent
	}
	return nil
}

func (x *FRepAttachment) GetLocationOffset() *FVector {
	if x != nil {
		return x.LocationOffset
	}
	return nil
}

func (x *FRepAttachment) GetRelativeScale() *FVector {
	if x != nil {
		return x.RelativeScale
	}
	return nil
}

func (x *FRepAttachment) GetRotationOffset() *FVector {
	if x != nil {
		return x.RotationOffset
	}
	return nil
}

func (x *FRepAttachment) GetAttachSocket() string {
	if x != nil {
		return x.AttachSocket
	}
	return ""
}

func (x *FRepAttachment) GetAttachComponent() *ActorComponentRef {
	if x != nil {
		return x.AttachComponent
	}
	return nil
}

type ActorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Removed               bool             `protobuf:"varint,1,opt,name=removed,proto3" json:"removed,omitempty"`
	OwningConnId          *uint32          `protobuf:"varint,2,opt,name=owningConnId,proto3,oneof" json:"owningConnId,omitempty"`
	BReplicateMovement    *bool            `protobuf:"varint,3,opt,name=bReplicateMovement,proto3,oneof" json:"bReplicateMovement,omitempty"`
	LocalRole             *uint32          `protobuf:"varint,4,opt,name=localRole,proto3,oneof" json:"localRole,omitempty"`
	RemoteRole            *uint32          `protobuf:"varint,5,opt,name=remoteRole,proto3,oneof" json:"remoteRole,omitempty"`
	Owner                 *UnrealObjectRef `protobuf:"bytes,6,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	BHidden               *bool            `protobuf:"varint,7,opt,name=bHidden,proto3,oneof" json:"bHidden,omitempty"`
	BTearOff              *bool            `protobuf:"varint,8,opt,name=bTearOff,proto3,oneof" json:"bTearOff,omitempty"`
	BCanBeDamaged         *bool            `protobuf:"varint,9,opt,name=bCanBeDamaged,proto3,oneof" json:"bCanBeDamaged,omitempty"`
	Instigator            *UnrealObjectRef `protobuf:"bytes,10,opt,name=instigator,proto3,oneof" json:"instigator,omitempty"`
	ReplicatedMovement    *FRepMovement    `protobuf:"bytes,11,opt,name=replicatedMovement,proto3,oneof" json:"replicatedMovement,omitempty"`
	AttachmentReplication *FRepAttachment  `protobuf:"bytes,12,opt,name=attachmentReplication,proto3,oneof" json:"attachmentReplication,omitempty"`
}

func (x *ActorState) Reset() {
	*x = ActorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorState) ProtoMessage() {}

func (x *ActorState) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorState.ProtoReflect.Descriptor instead.
func (*ActorState) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{7}
}

func (x *ActorState) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *ActorState) GetOwningConnId() uint32 {
	if x != nil && x.OwningConnId != nil {
		return *x.OwningConnId
	}
	return 0
}

func (x *ActorState) GetBReplicateMovement() bool {
	if x != nil && x.BReplicateMovement != nil {
		return *x.BReplicateMovement
	}
	return false
}

func (x *ActorState) GetLocalRole() uint32 {
	if x != nil && x.LocalRole != nil {
		return *x.LocalRole
	}
	return 0
}

func (x *ActorState) GetRemoteRole() uint32 {
	if x != nil && x.RemoteRole != nil {
		return *x.RemoteRole
	}
	return 0
}

func (x *ActorState) GetOwner() *UnrealObjectRef {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ActorState) GetBHidden() bool {
	if x != nil && x.BHidden != nil {
		return *x.BHidden
	}
	return false
}

func (x *ActorState) GetBTearOff() bool {
	if x != nil && x.BTearOff != nil {
		return *x.BTearOff
	}
	return false
}

func (x *ActorState) GetBCanBeDamaged() bool {
	if x != nil && x.BCanBeDamaged != nil {
		return *x.BCanBeDamaged
	}
	return false
}

func (x *ActorState) GetInstigator() *UnrealObjectRef {
	if x != nil {
		return x.Instigator
	}
	return nil
}

func (x *ActorState) GetReplicatedMovement() *FRepMovement {
	if x != nil {
		return x.ReplicatedMovement
	}
	return nil
}

func (x *ActorState) GetAttachmentReplication() *FRepAttachment {
	if x != nil {
		return x.AttachmentReplication
	}
	return nil
}

type ActorComponentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Marks that the state should be removed from the containing map
	Removed     bool  `protobuf:"varint,1,opt,name=removed,proto3" json:"removed,omitempty"`
	BIsActive   *bool `protobuf:"varint,2,opt,name=bIsActive,proto3,oneof" json:"bIsActive,omitempty"`
	BReplicated *bool `protobuf:"varint,3,opt,name=bReplicated,proto3,oneof" json:"bReplicated,omitempty"`
}

func (x *ActorComponentState) Reset() {
	*x = ActorComponentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActorComponentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorComponentState) ProtoMessage() {}

func (x *ActorComponentState) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorComponentState.ProtoReflect.Descriptor instead.
func (*ActorComponentState) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{8}
}

func (x *ActorComponentState) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *ActorComponentState) GetBIsActive() bool {
	if x != nil && x.BIsActive != nil {
		return *x.BIsActive
	}
	return false
}

func (x *ActorComponentState) GetBReplicated() bool {
	if x != nil && x.BReplicated != nil {
		return *x.BReplicated
	}
	return false
}

type SceneComponentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BAbsoluteLocation               *bool                `protobuf:"varint,2,opt,name=bAbsoluteLocation,proto3,oneof" json:"bAbsoluteLocation,omitempty"`
	BAbsoluteRotation               *bool                `protobuf:"varint,3,opt,name=bAbsoluteRotation,proto3,oneof" json:"bAbsoluteRotation,omitempty"`
	BAbsoluteScale                  *bool                `protobuf:"varint,4,opt,name=bAbsoluteScale,proto3,oneof" json:"bAbsoluteScale,omitempty"`
	BVisible                        *bool                `protobuf:"varint,5,opt,name=bVisible,proto3,oneof" json:"bVisible,omitempty"`
	BShouldBeAttached               *bool                `protobuf:"varint,6,opt,name=bShouldBeAttached,proto3,oneof" json:"bShouldBeAttached,omitempty"`
	BShouldSnapLocationWhenAttached *bool                `protobuf:"varint,7,opt,name=bShouldSnapLocationWhenAttached,proto3,oneof" json:"bShouldSnapLocationWhenAttached,omitempty"`
	BShouldSnapRotationWhenAttached *bool                `protobuf:"varint,8,opt,name=bShouldSnapRotationWhenAttached,proto3,oneof" json:"bShouldSnapRotationWhenAttached,omitempty"`
	AttachParent                    *ActorComponentRef   `protobuf:"bytes,9,opt,name=attachParent,proto3,oneof" json:"attachParent,omitempty"`
	AttachChildren                  []*ActorComponentRef `protobuf:"bytes,10,rep,name=attachChildren,proto3" json:"attachChildren,omitempty"`
	AttachSocketName                *string              `protobuf:"bytes,11,opt,name=attachSocketName,proto3,oneof" json:"attachSocketName,omitempty"`
	RelativeLocation                *FVector             `protobuf:"bytes,12,opt,name=relativeLocation,proto3,oneof" json:"relativeLocation,omitempty"`
	RelativeRotation                *FVector             `protobuf:"bytes,13,opt,name=relativeRotation,proto3,oneof" json:"relativeRotation,omitempty"`
	RelativeScale                   *FVector             `protobuf:"bytes,14,opt,name=relativeScale,proto3,oneof" json:"relativeScale,omitempty"`
}

func (x *SceneComponentState) Reset() {
	*x = SceneComponentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneComponentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneComponentState) ProtoMessage() {}

func (x *SceneComponentState) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneComponentState.ProtoReflect.Descriptor instead.
func (*SceneComponentState) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{9}
}

func (x *SceneComponentState) GetBAbsoluteLocation() bool {
	if x != nil && x.BAbsoluteLocation != nil {
		return *x.BAbsoluteLocation
	}
	return false
}

func (x *SceneComponentState) GetBAbsoluteRotation() bool {
	if x != nil && x.BAbsoluteRotation != nil {
		return *x.BAbsoluteRotation
	}
	return false
}

func (x *SceneComponentState) GetBAbsoluteScale() bool {
	if x != nil && x.BAbsoluteScale != nil {
		return *x.BAbsoluteScale
	}
	return false
}

func (x *SceneComponentState) GetBVisible() bool {
	if x != nil && x.BVisible != nil {
		return *x.BVisible
	}
	return false
}

func (x *SceneComponentState) GetBShouldBeAttached() bool {
	if x != nil && x.BShouldBeAttached != nil {
		return *x.BShouldBeAttached
	}
	return false
}

func (x *SceneComponentState) GetBShouldSnapLocationWhenAttached() bool {
	if x != nil && x.BShouldSnapLocationWhenAttached != nil {
		return *x.BShouldSnapLocationWhenAttached
	}
	return false
}

func (x *SceneComponentState) GetBShouldSnapRotationWhenAttached() bool {
	if x != nil && x.BShouldSnapRotationWhenAttached != nil {
		return *x.BShouldSnapRotationWhenAttached
	}
	return false
}

func (x *SceneComponentState) GetAttachParent() *ActorComponentRef {
	if x != nil {
		return x.AttachParent
	}
	return nil
}

func (x *SceneComponentState) GetAttachChildren() []*ActorComponentRef {
	if x != nil {
		return x.AttachChildren
	}
	return nil
}

func (x *SceneComponentState) GetAttachSocketName() string {
	if x != nil && x.AttachSocketName != nil {
		return *x.AttachSocketName
	}
	return ""
}

func (x *SceneComponentState) GetRelativeLocation() *FVector {
	if x != nil {
		return x.RelativeLocation
	}
	return nil
}

func (x *SceneComponentState) GetRelativeRotation() *FVector {
	if x != nil {
		return x.RelativeRotation
	}
	return nil
}

func (x *SceneComponentState) GetRelativeScale() *FVector {
	if x != nil {
		return x.RelativeScale
	}
	return nil
}

type FBasedMovementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovementBase            *ActorComponentRef `protobuf:"bytes,1,opt,name=movementBase,proto3,oneof" json:"movementBase,omitempty"`
	BoneName                *string            `protobuf:"bytes,2,opt,name=boneName,proto3,oneof" json:"boneName,omitempty"`
	Location                *FVector           `protobuf:"bytes,3,opt,name=location,proto3,oneof" json:"location,omitempty"`
	Rotation                *FVector           `protobuf:"bytes,4,opt,name=rotation,proto3,oneof" json:"rotation,omitempty"`
	BServerHasBaseComponent *bool              `protobuf:"varint,5,opt,name=bServerHasBaseComponent,proto3,oneof" json:"bServerHasBaseComponent,omitempty"`
	BRelativeRotation       *bool              `protobuf:"varint,6,opt,name=bRelativeRotation,proto3,oneof" json:"bRelativeRotation,omitempty"`
	BServerHasVelocity      *bool              `protobuf:"varint,7,opt,name=bServerHasVelocity,proto3,oneof" json:"bServerHasVelocity,omitempty"`
}

func (x *FBasedMovementInfo) Reset() {
	*x = FBasedMovementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FBasedMovementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FBasedMovementInfo) ProtoMessage() {}

func (x *FBasedMovementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FBasedMovementInfo.ProtoReflect.Descriptor instead.
func (*FBasedMovementInfo) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{10}
}

func (x *FBasedMovementInfo) GetMovementBase() *ActorComponentRef {
	if x != nil {
		return x.MovementBase
	}
	return nil
}

func (x *FBasedMovementInfo) GetBoneName() string {
	if x != nil && x.BoneName != nil {
		return *x.BoneName
	}
	return ""
}

func (x *FBasedMovementInfo) GetLocation() *FVector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FBasedMovementInfo) GetRotation() *FVector {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *FBasedMovementInfo) GetBServerHasBaseComponent() bool {
	if x != nil && x.BServerHasBaseComponent != nil {
		return *x.BServerHasBaseComponent
	}
	return false
}

func (x *FBasedMovementInfo) GetBRelativeRotation() bool {
	if x != nil && x.BRelativeRotation != nil {
		return *x.BRelativeRotation
	}
	return false
}

func (x *FBasedMovementInfo) GetBServerHasVelocity() bool {
	if x != nil && x.BServerHasVelocity != nil {
		return *x.BServerHasVelocity
	}
	return false
}

type FRepRootMotionMontage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BIsActive               *bool                                         `protobuf:"varint,1,opt,name=bIsActive,proto3,oneof" json:"bIsActive,omitempty"`
	AnimMontage             *UnrealObjectRef                              `protobuf:"bytes,2,opt,name=animMontage,proto3,oneof" json:"animMontage,omitempty"`
	Position                *float32                                      `protobuf:"fixed32,3,opt,name=position,proto3,oneof" json:"position,omitempty"`
	Location                *FVector                                      `protobuf:"bytes,4,opt,name=location,proto3,oneof" json:"location,omitempty"`
	Rotation                *FVector                                      `protobuf:"bytes,5,opt,name=rotation,proto3,oneof" json:"rotation,omitempty"`
	MovementBase            *ActorComponentRef                            `protobuf:"bytes,6,opt,name=movementBase,proto3,oneof" json:"movementBase,omitempty"`
	MovementBaseBoneName    *string                                       `protobuf:"bytes,7,opt,name=movementBaseBoneName,proto3,oneof" json:"movementBaseBoneName,omitempty"`
	BRelativePosition       *bool                                         `protobuf:"varint,8,opt,name=bRelativePosition,proto3,oneof" json:"bRelativePosition,omitempty"`
	BRelativeRotation       *bool                                         `protobuf:"varint,9,opt,name=bRelativeRotation,proto3,oneof" json:"bRelativeRotation,omitempty"`
	AuthoritativeRootMotion *FRepRootMotionMontage_FRootMotionSourceGroup `protobuf:"bytes,10,opt,name=authoritativeRootMotion,proto3,oneof" json:"authoritativeRootMotion,omitempty"`
	Acceleration            *FVector                                      `protobuf:"bytes,11,opt,name=acceleration,proto3,oneof" json:"acceleration,omitempty"`
	LinearVelocity          *FVector                                      `protobuf:"bytes,12,opt,name=linearVelocity,proto3,oneof" json:"linearVelocity,omitempty"`
}

func (x *FRepRootMotionMontage) Reset() {
	*x = FRepRootMotionMontage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRepRootMotionMontage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRepRootMotionMontage) ProtoMessage() {}

func (x *FRepRootMotionMontage) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRepRootMotionMontage.ProtoReflect.Descriptor instead.
func (*FRepRootMotionMontage) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{11}
}

func (x *FRepRootMotionMontage) GetBIsActive() bool {
	if x != nil && x.BIsActive != nil {
		return *x.BIsActive
	}
	return false
}

func (x *FRepRootMotionMontage) GetAnimMontage() *UnrealObjectRef {
	if x != nil {
		return x.AnimMontage
	}
	return nil
}

func (x *FRepRootMotionMontage) GetPosition() float32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *FRepRootMotionMontage) GetLocation() *FVector {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FRepRootMotionMontage) GetRotation() *FVector {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *FRepRootMotionMontage) GetMovementBase() *ActorComponentRef {
	if x != nil {
		return x.MovementBase
	}
	return nil
}

func (x *FRepRootMotionMontage) GetMovementBaseBoneName() string {
	if x != nil && x.MovementBaseBoneName != nil {
		return *x.MovementBaseBoneName
	}
	return ""
}

func (x *FRepRootMotionMontage) GetBRelativePosition() bool {
	if x != nil && x.BRelativePosition != nil {
		return *x.BRelativePosition
	}
	return false
}

func (x *FRepRootMotionMontage) GetBRelativeRotation() bool {
	if x != nil && x.BRelativeRotation != nil {
		return *x.BRelativeRotation
	}
	return false
}

func (x *FRepRootMotionMontage) GetAuthoritativeRootMotion() *FRepRootMotionMontage_FRootMotionSourceGroup {
	if x != nil {
		return x.AuthoritativeRootMotion
	}
	return nil
}

func (x *FRepRootMotionMontage) GetAcceleration() *FVector {
	if x != nil {
		return x.Acceleration
	}
	return nil
}

func (x *FRepRootMotionMontage) GetLinearVelocity() *FVector {
	if x != nil {
		return x.LinearVelocity
	}
	return nil
}

type CharacterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootMotion                         *FRepRootMotionMontage `protobuf:"bytes,2,opt,name=rootMotion,proto3,oneof" json:"rootMotion,omitempty"`
	BasedMovement                      *FBasedMovementInfo    `protobuf:"bytes,3,opt,name=basedMovement,proto3,oneof" json:"basedMovement,omitempty"`
	ServerLastTransformUpdateTimeStamp *float32               `protobuf:"fixed32,4,opt,name=serverLastTransformUpdateTimeStamp,proto3,oneof" json:"serverLastTransformUpdateTimeStamp,omitempty"`
	MovementMode                       *uint32                `protobuf:"varint,5,opt,name=movementMode,proto3,oneof" json:"movementMode,omitempty"`
	BIsCrouched                        *bool                  `protobuf:"varint,6,opt,name=bIsCrouched,proto3,oneof" json:"bIsCrouched,omitempty"`
	BProxyIsJumpForceApplied           *bool                  `protobuf:"varint,7,opt,name=bProxyIsJumpForceApplied,proto3,oneof" json:"bProxyIsJumpForceApplied,omitempty"`
	AnimRootMotionTranslationScale     *float32               `protobuf:"fixed32,8,opt,name=animRootMotionTranslationScale,proto3,oneof" json:"animRootMotionTranslationScale,omitempty"`
	ReplayLastTransformUpdateTimeStamp *float32               `protobuf:"fixed32,9,opt,name=replayLastTransformUpdateTimeStamp,proto3,oneof" json:"replayLastTransformUpdateTimeStamp,omitempty"`
}

func (x *CharacterState) Reset() {
	*x = CharacterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterState) ProtoMessage() {}

func (x *CharacterState) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterState.ProtoReflect.Descriptor instead.
func (*CharacterState) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{12}
}

func (x *CharacterState) GetRootMotion() *FRepRootMotionMontage {
	if x != nil {
		return x.RootMotion
	}
	return nil
}

func (x *CharacterState) GetBasedMovement() *FBasedMovementInfo {
	if x != nil {
		return x.BasedMovement
	}
	return nil
}

func (x *CharacterState) GetServerLastTransformUpdateTimeStamp() float32 {
	if x != nil && x.ServerLastTransformUpdateTimeStamp != nil {
		return *x.ServerLastTransformUpdateTimeStamp
	}
	return 0
}

func (x *CharacterState) GetMovementMode() uint32 {
	if x != nil && x.MovementMode != nil {
		return *x.MovementMode
	}
	return 0
}

func (x *CharacterState) GetBIsCrouched() bool {
	if x != nil && x.BIsCrouched != nil {
		return *x.BIsCrouched
	}
	return false
}

func (x *CharacterState) GetBProxyIsJumpForceApplied() bool {
	if x != nil && x.BProxyIsJumpForceApplied != nil {
		return *x.BProxyIsJumpForceApplied
	}
	return false
}

func (x *CharacterState) GetAnimRootMotionTranslationScale() float32 {
	if x != nil && x.AnimRootMotionTranslationScale != nil {
		return *x.AnimRootMotionTranslationScale
	}
	return 0
}

func (x *CharacterState) GetReplayLastTransformUpdateTimeStamp() float32 {
	if x != nil && x.ReplayLastTransformUpdateTimeStamp != nil {
		return *x.ReplayLastTransformUpdateTimeStamp
	}
	return 0
}

type Character_ServerMovePacked_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitsNum    uint32 `protobuf:"varint,1,opt,name=bitsNum,proto3" json:"bitsNum,omitempty"`
	PackedBits []byte `protobuf:"bytes,2,opt,name=packedBits,proto3" json:"packedBits,omitempty"`
}

func (x *Character_ServerMovePacked_Params) Reset() {
	*x = Character_ServerMovePacked_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_ServerMovePacked_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_ServerMovePacked_Params) ProtoMessage() {}

func (x *Character_ServerMovePacked_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_ServerMovePacked_Params.ProtoReflect.Descriptor instead.
func (*Character_ServerMovePacked_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{13}
}

func (x *Character_ServerMovePacked_Params) GetBitsNum() uint32 {
	if x != nil {
		return x.BitsNum
	}
	return 0
}

func (x *Character_ServerMovePacked_Params) GetPackedBits() []byte {
	if x != nil {
		return x.PackedBits
	}
	return nil
}

type Character_ClientMoveResponsePacked_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitsNum    uint32 `protobuf:"varint,1,opt,name=bitsNum,proto3" json:"bitsNum,omitempty"`
	PackedBits []byte `protobuf:"bytes,2,opt,name=packedBits,proto3" json:"packedBits,omitempty"`
}

func (x *Character_ClientMoveResponsePacked_Params) Reset() {
	*x = Character_ClientMoveResponsePacked_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_ClientMoveResponsePacked_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_ClientMoveResponsePacked_Params) ProtoMessage() {}

func (x *Character_ClientMoveResponsePacked_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_ClientMoveResponsePacked_Params.ProtoReflect.Descriptor instead.
func (*Character_ClientMoveResponsePacked_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{14}
}

func (x *Character_ClientMoveResponsePacked_Params) GetBitsNum() uint32 {
	if x != nil {
		return x.BitsNum
	}
	return 0
}

func (x *Character_ClientMoveResponsePacked_Params) GetPackedBits() []byte {
	if x != nil {
		return x.PackedBits
	}
	return nil
}

type PlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score      *float32 `protobuf:"fixed32,2,opt,name=score,proto3,oneof" json:"score,omitempty"`
	PlayerId   *int32   `protobuf:"varint,3,opt,name=playerId,proto3,oneof" json:"playerId,omitempty"`
	Ping       *uint32  `protobuf:"varint,4,opt,name=ping,proto3,oneof" json:"ping,omitempty"`
	PlayerName *string  `protobuf:"bytes,5,opt,name=playerName,proto3,oneof" json:"playerName,omitempty"`
}

func (x *PlayerState) Reset() {
	*x = PlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerState) ProtoMessage() {}

func (x *PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerState.ProtoReflect.Descriptor instead.
func (*PlayerState) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{15}
}

func (x *PlayerState) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *PlayerState) GetPlayerId() int32 {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return 0
}

func (x *PlayerState) GetPing() uint32 {
	if x != nil && x.Ping != nil {
		return *x.Ping
	}
	return 0
}

func (x *PlayerState) GetPlayerName() string {
	if x != nil && x.PlayerName != nil {
		return *x.PlayerName
	}
	return ""
}

type ControllerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APlayerState is an actor.
	PlayerState *UnrealObjectRef `protobuf:"bytes,2,opt,name=playerState,proto3" json:"playerState,omitempty"`
	Pawn        *UnrealObjectRef `protobuf:"bytes,3,opt,name=pawn,proto3" json:"pawn,omitempty"`
}

func (x *ControllerState) Reset() {
	*x = ControllerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerState) ProtoMessage() {}

func (x *ControllerState) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerState.ProtoReflect.Descriptor instead.
func (*ControllerState) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{16}
}

func (x *ControllerState) GetPlayerState() *UnrealObjectRef {
	if x != nil {
		return x.PlayerState
	}
	return nil
}

func (x *ControllerState) GetPawn() *UnrealObjectRef {
	if x != nil {
		return x.Pawn
	}
	return nil
}

type Controller_ClientSetLocation_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLocation *FVector `protobuf:"bytes,1,opt,name=newLocation,proto3" json:"newLocation,omitempty"`
	NewRotation *FVector `protobuf:"bytes,2,opt,name=newRotation,proto3" json:"newRotation,omitempty"`
}

func (x *Controller_ClientSetLocation_Params) Reset() {
	*x = Controller_ClientSetLocation_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Controller_ClientSetLocation_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Controller_ClientSetLocation_Params) ProtoMessage() {}

func (x *Controller_ClientSetLocation_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Controller_ClientSetLocation_Params.ProtoReflect.Descriptor instead.
func (*Controller_ClientSetLocation_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{17}
}

func (x *Controller_ClientSetLocation_Params) GetNewLocation() *FVector {
	if x != nil {
		return x.NewLocation
	}
	return nil
}

func (x *Controller_ClientSetLocation_Params) GetNewRotation() *FVector {
	if x != nil {
		return x.NewRotation
	}
	return nil
}

type Controller_ClientSetRotation_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewRotation  *FVector `protobuf:"bytes,1,opt,name=newRotation,proto3" json:"newRotation,omitempty"`
	BResetCamera bool     `protobuf:"varint,2,opt,name=bResetCamera,proto3" json:"bResetCamera,omitempty"`
}

func (x *Controller_ClientSetRotation_Params) Reset() {
	*x = Controller_ClientSetRotation_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Controller_ClientSetRotation_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Controller_ClientSetRotation_Params) ProtoMessage() {}

func (x *Controller_ClientSetRotation_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Controller_ClientSetRotation_Params.ProtoReflect.Descriptor instead.
func (*Controller_ClientSetRotation_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{18}
}

func (x *Controller_ClientSetRotation_Params) GetNewRotation() *FVector {
	if x != nil {
		return x.NewRotation
	}
	return nil
}

func (x *Controller_ClientSetRotation_Params) GetBResetCamera() bool {
	if x != nil {
		return x.BResetCamera
	}
	return false
}

type PlayerControllerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetViewRotation *FVector `protobuf:"bytes,2,opt,name=targetViewRotation,proto3,oneof" json:"targetViewRotation,omitempty"`
	SpawnLocation      *FVector `protobuf:"bytes,3,opt,name=spawnLocation,proto3,oneof" json:"spawnLocation,omitempty"`
}

func (x *PlayerControllerState) Reset() {
	*x = PlayerControllerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerControllerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerControllerState) ProtoMessage() {}

func (x *PlayerControllerState) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerControllerState.ProtoReflect.Descriptor instead.
func (*PlayerControllerState) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{19}
}

func (x *PlayerControllerState) GetTargetViewRotation() *FVector {
	if x != nil {
		return x.TargetViewRotation
	}
	return nil
}

func (x *PlayerControllerState) GetSpawnLocation() *FVector {
	if x != nil {
		return x.SpawnLocation
	}
	return nil
}

type PlayerController_ServerUpdateCamera_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CamLoc         *FVector `protobuf:"bytes,1,opt,name=camLoc,proto3" json:"camLoc,omitempty"`
	CamPitchAndYaw int32    `protobuf:"varint,2,opt,name=camPitchAndYaw,proto3" json:"camPitchAndYaw,omitempty"`
}

func (x *PlayerController_ServerUpdateCamera_Params) Reset() {
	*x = PlayerController_ServerUpdateCamera_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ServerUpdateCamera_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ServerUpdateCamera_Params) ProtoMessage() {}

func (x *PlayerController_ServerUpdateCamera_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ServerUpdateCamera_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ServerUpdateCamera_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{20}
}

func (x *PlayerController_ServerUpdateCamera_Params) GetCamLoc() *FVector {
	if x != nil {
		return x.CamLoc
	}
	return nil
}

func (x *PlayerController_ServerUpdateCamera_Params) GetCamPitchAndYaw() int32 {
	if x != nil {
		return x.CamPitchAndYaw
	}
	return 0
}

type PlayerController_ClientSetHUD_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HudClassName *string `protobuf:"bytes,1,opt,name=hudClassName,proto3,oneof" json:"hudClassName,omitempty"`
}

func (x *PlayerController_ClientSetHUD_Params) Reset() {
	*x = PlayerController_ClientSetHUD_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ClientSetHUD_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ClientSetHUD_Params) ProtoMessage() {}

func (x *PlayerController_ClientSetHUD_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ClientSetHUD_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ClientSetHUD_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{21}
}

func (x *PlayerController_ClientSetHUD_Params) GetHudClassName() string {
	if x != nil && x.HudClassName != nil {
		return *x.HudClassName
	}
	return ""
}

type PlayerController_ClientSetViewTarget_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor         *UnrealObjectRef `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	BlendTime     float32          `protobuf:"fixed32,2,opt,name=blendTime,proto3" json:"blendTime,omitempty"`
	BlendFunction uint32           `protobuf:"varint,3,opt,name=blendFunction,proto3" json:"blendFunction,omitempty"`
	BlendExp      float32          `protobuf:"fixed32,4,opt,name=blendExp,proto3" json:"blendExp,omitempty"`
	BLockOutgoing bool             `protobuf:"varint,5,opt,name=bLockOutgoing,proto3" json:"bLockOutgoing,omitempty"`
}

func (x *PlayerController_ClientSetViewTarget_Params) Reset() {
	*x = PlayerController_ClientSetViewTarget_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ClientSetViewTarget_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ClientSetViewTarget_Params) ProtoMessage() {}

func (x *PlayerController_ClientSetViewTarget_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ClientSetViewTarget_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ClientSetViewTarget_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{22}
}

func (x *PlayerController_ClientSetViewTarget_Params) GetActor() *UnrealObjectRef {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *PlayerController_ClientSetViewTarget_Params) GetBlendTime() float32 {
	if x != nil {
		return x.BlendTime
	}
	return 0
}

func (x *PlayerController_ClientSetViewTarget_Params) GetBlendFunction() uint32 {
	if x != nil {
		return x.BlendFunction
	}
	return 0
}

func (x *PlayerController_ClientSetViewTarget_Params) GetBlendExp() float32 {
	if x != nil {
		return x.BlendExp
	}
	return 0
}

func (x *PlayerController_ClientSetViewTarget_Params) GetBLockOutgoing() bool {
	if x != nil {
		return x.BLockOutgoing
	}
	return false
}

type PlayerController_ClientEnableNetworkVoice_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BEnable *bool `protobuf:"varint,1,opt,name=bEnable,proto3,oneof" json:"bEnable,omitempty"`
}

func (x *PlayerController_ClientEnableNetworkVoice_Params) Reset() {
	*x = PlayerController_ClientEnableNetworkVoice_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ClientEnableNetworkVoice_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ClientEnableNetworkVoice_Params) ProtoMessage() {}

func (x *PlayerController_ClientEnableNetworkVoice_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ClientEnableNetworkVoice_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ClientEnableNetworkVoice_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{23}
}

func (x *PlayerController_ClientEnableNetworkVoice_Params) GetBEnable() bool {
	if x != nil && x.BEnable != nil {
		return *x.BEnable
	}
	return false
}

type PlayerController_ClientCapBandwidth_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cap int32 `protobuf:"varint,1,opt,name=cap,proto3" json:"cap,omitempty"`
}

func (x *PlayerController_ClientCapBandwidth_Params) Reset() {
	*x = PlayerController_ClientCapBandwidth_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ClientCapBandwidth_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ClientCapBandwidth_Params) ProtoMessage() {}

func (x *PlayerController_ClientCapBandwidth_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ClientCapBandwidth_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ClientCapBandwidth_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{24}
}

func (x *PlayerController_ClientCapBandwidth_Params) GetCap() int32 {
	if x != nil {
		return x.Cap
	}
	return 0
}

type PlayerController_ClientRestart_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pawn *UnrealObjectRef `protobuf:"bytes,1,opt,name=pawn,proto3" json:"pawn,omitempty"`
}

func (x *PlayerController_ClientRestart_Params) Reset() {
	*x = PlayerController_ClientRestart_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ClientRestart_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ClientRestart_Params) ProtoMessage() {}

func (x *PlayerController_ClientRestart_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ClientRestart_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ClientRestart_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{25}
}

func (x *PlayerController_ClientRestart_Params) GetPawn() *UnrealObjectRef {
	if x != nil {
		return x.Pawn
	}
	return nil
}

type PlayerController_ClientSetCameraMode_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCamMode string `protobuf:"bytes,1,opt,name=newCamMode,proto3" json:"newCamMode,omitempty"`
}

func (x *PlayerController_ClientSetCameraMode_Params) Reset() {
	*x = PlayerController_ClientSetCameraMode_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ClientSetCameraMode_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ClientSetCameraMode_Params) ProtoMessage() {}

func (x *PlayerController_ClientSetCameraMode_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ClientSetCameraMode_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ClientSetCameraMode_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{26}
}

func (x *PlayerController_ClientSetCameraMode_Params) GetNewCamMode() string {
	if x != nil {
		return x.NewCamMode
	}
	return ""
}

type PlayerController_ClientRetryClientRestart_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pawn *UnrealObjectRef `protobuf:"bytes,1,opt,name=pawn,proto3" json:"pawn,omitempty"`
}

func (x *PlayerController_ClientRetryClientRestart_Params) Reset() {
	*x = PlayerController_ClientRetryClientRestart_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ClientRetryClientRestart_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ClientRetryClientRestart_Params) ProtoMessage() {}

func (x *PlayerController_ClientRetryClientRestart_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ClientRetryClientRestart_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ClientRetryClientRestart_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{27}
}

func (x *PlayerController_ClientRetryClientRestart_Params) GetPawn() *UnrealObjectRef {
	if x != nil {
		return x.Pawn
	}
	return nil
}

type PlayerController_ServerSetSpectatorLocation_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewLoc *FVector `protobuf:"bytes,1,opt,name=newLoc,proto3" json:"newLoc,omitempty"`
	NewRot *FVector `protobuf:"bytes,2,opt,name=newRot,proto3" json:"newRot,omitempty"`
}

func (x *PlayerController_ServerSetSpectatorLocation_Params) Reset() {
	*x = PlayerController_ServerSetSpectatorLocation_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ServerSetSpectatorLocation_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ServerSetSpectatorLocation_Params) ProtoMessage() {}

func (x *PlayerController_ServerSetSpectatorLocation_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ServerSetSpectatorLocation_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ServerSetSpectatorLocation_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{28}
}

func (x *PlayerController_ServerSetSpectatorLocation_Params) GetNewLoc() *FVector {
	if x != nil {
		return x.NewLoc
	}
	return nil
}

func (x *PlayerController_ServerSetSpectatorLocation_Params) GetNewRot() *FVector {
	if x != nil {
		return x.NewRot
	}
	return nil
}

type PlayerController_ServerAcknowledgePossession_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pawn *UnrealObjectRef `protobuf:"bytes,1,opt,name=pawn,proto3" json:"pawn,omitempty"`
}

func (x *PlayerController_ServerAcknowledgePossession_Params) Reset() {
	*x = PlayerController_ServerAcknowledgePossession_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ServerAcknowledgePossession_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ServerAcknowledgePossession_Params) ProtoMessage() {}

func (x *PlayerController_ServerAcknowledgePossession_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ServerAcknowledgePossession_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ServerAcknowledgePossession_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{29}
}

func (x *PlayerController_ServerAcknowledgePossession_Params) GetPawn() *UnrealObjectRef {
	if x != nil {
		return x.Pawn
	}
	return nil
}

type PlayerController_ClientGotoState_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewState string `protobuf:"bytes,1,opt,name=newState,proto3" json:"newState,omitempty"`
}

func (x *PlayerController_ClientGotoState_Params) Reset() {
	*x = PlayerController_ClientGotoState_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ClientGotoState_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ClientGotoState_Params) ProtoMessage() {}

func (x *PlayerController_ClientGotoState_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ClientGotoState_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ClientGotoState_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{30}
}

func (x *PlayerController_ClientGotoState_Params) GetNewState() string {
	if x != nil {
		return x.NewState
	}
	return ""
}

type PlayerController_ClientReceiveLocalizedMessage_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message              string           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Switch               int32            `protobuf:"varint,2,opt,name=switch,proto3" json:"switch,omitempty"`
	RelatedPlayerState_1 *UnrealObjectRef `protobuf:"bytes,3,opt,name=relatedPlayerState_1,json=relatedPlayerState1,proto3" json:"relatedPlayerState_1,omitempty"`
	RelatedPlayerState_2 *UnrealObjectRef `protobuf:"bytes,4,opt,name=relatedPlayerState_2,json=relatedPlayerState2,proto3" json:"relatedPlayerState_2,omitempty"`
	OptionalObject       *UnrealObjectRef `protobuf:"bytes,5,opt,name=optionalObject,proto3" json:"optionalObject,omitempty"`
}

func (x *PlayerController_ClientReceiveLocalizedMessage_Params) Reset() {
	*x = PlayerController_ClientReceiveLocalizedMessage_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerController_ClientReceiveLocalizedMessage_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerController_ClientReceiveLocalizedMessage_Params) ProtoMessage() {}

func (x *PlayerController_ClientReceiveLocalizedMessage_Params) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerController_ClientReceiveLocalizedMessage_Params.ProtoReflect.Descriptor instead.
func (*PlayerController_ClientReceiveLocalizedMessage_Params) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{31}
}

func (x *PlayerController_ClientReceiveLocalizedMessage_Params) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PlayerController_ClientReceiveLocalizedMessage_Params) GetSwitch() int32 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *PlayerController_ClientReceiveLocalizedMessage_Params) GetRelatedPlayerState_1() *UnrealObjectRef {
	if x != nil {
		return x.RelatedPlayerState_1
	}
	return nil
}

func (x *PlayerController_ClientReceiveLocalizedMessage_Params) GetRelatedPlayerState_2() *UnrealObjectRef {
	if x != nil {
		return x.RelatedPlayerState_2
	}
	return nil
}

func (x *PlayerController_ClientReceiveLocalizedMessage_Params) GetOptionalObject() *UnrealObjectRef {
	if x != nil {
		return x.OptionalObject
	}
	return nil
}

type GameStateBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpectatorClassName         *string  `protobuf:"bytes,2,opt,name=spectatorClassName,proto3,oneof" json:"spectatorClassName,omitempty"`
	GameModeClassName          *string  `protobuf:"bytes,3,opt,name=gameModeClassName,proto3,oneof" json:"gameModeClassName,omitempty"`
	ReplicatedWorldTimeSeconds *float32 `protobuf:"fixed32,4,opt,name=replicatedWorldTimeSeconds,proto3,oneof" json:"replicatedWorldTimeSeconds,omitempty"`
	BReplicatedHasBegunPlay    *bool    `protobuf:"varint,5,opt,name=bReplicatedHasBegunPlay,proto3,oneof" json:"bReplicatedHasBegunPlay,omitempty"`
}

func (x *GameStateBase) Reset() {
	*x = GameStateBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStateBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStateBase) ProtoMessage() {}

func (x *GameStateBase) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStateBase.ProtoReflect.Descriptor instead.
func (*GameStateBase) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{32}
}

func (x *GameStateBase) GetSpectatorClassName() string {
	if x != nil && x.SpectatorClassName != nil {
		return *x.SpectatorClassName
	}
	return ""
}

func (x *GameStateBase) GetGameModeClassName() string {
	if x != nil && x.GameModeClassName != nil {
		return *x.GameModeClassName
	}
	return ""
}

func (x *GameStateBase) GetReplicatedWorldTimeSeconds() float32 {
	if x != nil && x.ReplicatedWorldTimeSeconds != nil {
		return *x.ReplicatedWorldTimeSeconds
	}
	return 0
}

func (x *GameStateBase) GetBReplicatedHasBegunPlay() bool {
	if x != nil && x.BReplicatedHasBegunPlay != nil {
		return *x.BReplicatedHasBegunPlay
	}
	return false
}

type UnrealObjectRef_GuidCachedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetGUID   uint32 `protobuf:"varint,1,opt,name=netGUID,proto3" json:"netGUID,omitempty"`
	PathName  string `protobuf:"bytes,2,opt,name=pathName,proto3" json:"pathName,omitempty"`
	OuterGUID uint32 `protobuf:"varint,3,opt,name=outerGUID,proto3" json:"outerGUID,omitempty"`
}

func (x *UnrealObjectRef_GuidCachedObject) Reset() {
	*x = UnrealObjectRef_GuidCachedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnrealObjectRef_GuidCachedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnrealObjectRef_GuidCachedObject) ProtoMessage() {}

func (x *UnrealObjectRef_GuidCachedObject) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnrealObjectRef_GuidCachedObject.ProtoReflect.Descriptor instead.
func (*UnrealObjectRef_GuidCachedObject) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{1, 0}
}

func (x *UnrealObjectRef_GuidCachedObject) GetNetGUID() uint32 {
	if x != nil {
		return x.NetGUID
	}
	return 0
}

func (x *UnrealObjectRef_GuidCachedObject) GetPathName() string {
	if x != nil {
		return x.PathName
	}
	return ""
}

func (x *UnrealObjectRef_GuidCachedObject) GetOuterGUID() uint32 {
	if x != nil {
		return x.OuterGUID
	}
	return 0
}

type FRepRootMotionMontage_FRootMotionSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority                 *uint32                                                                    `protobuf:"varint,1,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	LocalId                  *uint32                                                                    `protobuf:"varint,2,opt,name=localId,proto3,oneof" json:"localId,omitempty"`
	AccumulatedMode          *uint32                                                                    `protobuf:"varint,3,opt,name=accumulatedMode,proto3,oneof" json:"accumulatedMode,omitempty"`
	InstanceName             *string                                                                    `protobuf:"bytes,4,opt,name=instanceName,proto3,oneof" json:"instanceName,omitempty"`
	StartTime                *float32                                                                   `protobuf:"fixed32,5,opt,name=startTime,proto3,oneof" json:"startTime,omitempty"`
	CurrentTime              *float32                                                                   `protobuf:"fixed32,6,opt,name=currentTime,proto3,oneof" json:"currentTime,omitempty"`
	PreviousTime             *float32                                                                   `protobuf:"fixed32,7,opt,name=previousTime,proto3,oneof" json:"previousTime,omitempty"`
	Duration                 *float32                                                                   `protobuf:"fixed32,8,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	Status                   *uint32                                                                    `protobuf:"varint,9,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Settings                 *uint32                                                                    `protobuf:"varint,10,opt,name=settings,proto3,oneof" json:"settings,omitempty"`
	BInLocalSpace            *bool                                                                      `protobuf:"varint,11,opt,name=bInLocalSpace,proto3,oneof" json:"bInLocalSpace,omitempty"`
	BNeedsSimulatedCatchup   *bool                                                                      `protobuf:"varint,12,opt,name=bNeedsSimulatedCatchup,proto3,oneof" json:"bNeedsSimulatedCatchup,omitempty"`
	BSimulatedNeedsSmoothing *bool                                                                      `protobuf:"varint,13,opt,name=bSimulatedNeedsSmoothing,proto3,oneof" json:"bSimulatedNeedsSmoothing,omitempty"`
	BHasRootMotion           *bool                                                                      `protobuf:"varint,14,opt,name=bHasRootMotion,proto3,oneof" json:"bHasRootMotion,omitempty"`
	BlendWeight              *float32                                                                   `protobuf:"fixed32,15,opt,name=blendWeight,proto3,oneof" json:"blendWeight,omitempty"`
	FinishVelocityParams     *FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings `protobuf:"bytes,16,opt,name=finishVelocityParams,proto3,oneof" json:"finishVelocityParams,omitempty"`
}

func (x *FRepRootMotionMontage_FRootMotionSource) Reset() {
	*x = FRepRootMotionMontage_FRootMotionSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRepRootMotionMontage_FRootMotionSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRepRootMotionMontage_FRootMotionSource) ProtoMessage() {}

func (x *FRepRootMotionMontage_FRootMotionSource) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRepRootMotionMontage_FRootMotionSource.ProtoReflect.Descriptor instead.
func (*FRepRootMotionMontage_FRootMotionSource) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{11, 0}
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetLocalId() uint32 {
	if x != nil && x.LocalId != nil {
		return *x.LocalId
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetAccumulatedMode() uint32 {
	if x != nil && x.AccumulatedMode != nil {
		return *x.AccumulatedMode
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetInstanceName() string {
	if x != nil && x.InstanceName != nil {
		return *x.InstanceName
	}
	return ""
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetStartTime() float32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetCurrentTime() float32 {
	if x != nil && x.CurrentTime != nil {
		return *x.CurrentTime
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetPreviousTime() float32 {
	if x != nil && x.PreviousTime != nil {
		return *x.PreviousTime
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetSettings() uint32 {
	if x != nil && x.Settings != nil {
		return *x.Settings
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetBInLocalSpace() bool {
	if x != nil && x.BInLocalSpace != nil {
		return *x.BInLocalSpace
	}
	return false
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetBNeedsSimulatedCatchup() bool {
	if x != nil && x.BNeedsSimulatedCatchup != nil {
		return *x.BNeedsSimulatedCatchup
	}
	return false
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetBSimulatedNeedsSmoothing() bool {
	if x != nil && x.BSimulatedNeedsSmoothing != nil {
		return *x.BSimulatedNeedsSmoothing
	}
	return false
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetBHasRootMotion() bool {
	if x != nil && x.BHasRootMotion != nil {
		return *x.BHasRootMotion
	}
	return false
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetBlendWeight() float32 {
	if x != nil && x.BlendWeight != nil {
		return *x.BlendWeight
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource) GetFinishVelocityParams() *FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings {
	if x != nil {
		return x.FinishVelocityParams
	}
	return nil
}

type FRepRootMotionMontage_FRootMotionSourceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootMotionSources                        []*FRepRootMotionMontage_FRootMotionSource `protobuf:"bytes,1,rep,name=rootMotionSources,proto3" json:"rootMotionSources,omitempty"`
	PendingAddRootMotionSources              []*FRepRootMotionMontage_FRootMotionSource `protobuf:"bytes,2,rep,name=pendingAddRootMotionSources,proto3" json:"pendingAddRootMotionSources,omitempty"`
	BHasAdditiveSources                      *bool                                      `protobuf:"varint,3,opt,name=bHasAdditiveSources,proto3,oneof" json:"bHasAdditiveSources,omitempty"`
	BHasOverrideSources                      *bool                                      `protobuf:"varint,4,opt,name=bHasOverrideSources,proto3,oneof" json:"bHasOverrideSources,omitempty"`
	BHasOverrideSourcesWithIgnoreZAccumulate *bool                                      `protobuf:"varint,5,opt,name=bHasOverrideSourcesWithIgnoreZAccumulate,proto3,oneof" json:"bHasOverrideSourcesWithIgnoreZAccumulate,omitempty"`
	BIsAdditiveVelocityApplied               *bool                                      `protobuf:"varint,6,opt,name=bIsAdditiveVelocityApplied,proto3,oneof" json:"bIsAdditiveVelocityApplied,omitempty"`
	LastAccumulatedSettings                  *uint32                                    `protobuf:"varint,7,opt,name=lastAccumulatedSettings,proto3,oneof" json:"lastAccumulatedSettings,omitempty"`
	LastPreAdditiveVelocity                  *FVector                                   `protobuf:"bytes,8,opt,name=lastPreAdditiveVelocity,proto3,oneof" json:"lastPreAdditiveVelocity,omitempty"`
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) Reset() {
	*x = FRepRootMotionMontage_FRootMotionSourceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRepRootMotionMontage_FRootMotionSourceGroup) ProtoMessage() {}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRepRootMotionMontage_FRootMotionSourceGroup.ProtoReflect.Descriptor instead.
func (*FRepRootMotionMontage_FRootMotionSourceGroup) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{11, 1}
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) GetRootMotionSources() []*FRepRootMotionMontage_FRootMotionSource {
	if x != nil {
		return x.RootMotionSources
	}
	return nil
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) GetPendingAddRootMotionSources() []*FRepRootMotionMontage_FRootMotionSource {
	if x != nil {
		return x.PendingAddRootMotionSources
	}
	return nil
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) GetBHasAdditiveSources() bool {
	if x != nil && x.BHasAdditiveSources != nil {
		return *x.BHasAdditiveSources
	}
	return false
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) GetBHasOverrideSources() bool {
	if x != nil && x.BHasOverrideSources != nil {
		return *x.BHasOverrideSources
	}
	return false
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) GetBHasOverrideSourcesWithIgnoreZAccumulate() bool {
	if x != nil && x.BHasOverrideSourcesWithIgnoreZAccumulate != nil {
		return *x.BHasOverrideSourcesWithIgnoreZAccumulate
	}
	return false
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) GetBIsAdditiveVelocityApplied() bool {
	if x != nil && x.BIsAdditiveVelocityApplied != nil {
		return *x.BIsAdditiveVelocityApplied
	}
	return false
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) GetLastAccumulatedSettings() uint32 {
	if x != nil && x.LastAccumulatedSettings != nil {
		return *x.LastAccumulatedSettings
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSourceGroup) GetLastPreAdditiveVelocity() *FVector {
	if x != nil {
		return x.LastPreAdditiveVelocity
	}
	return nil
}

type FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode          *uint32  `protobuf:"varint,1,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	SetVelocity   *FVector `protobuf:"bytes,2,opt,name=setVelocity,proto3,oneof" json:"setVelocity,omitempty"`
	ClampVelocity *float32 `protobuf:"fixed32,3,opt,name=clampVelocity,proto3,oneof" json:"clampVelocity,omitempty"`
}

func (x *FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings) Reset() {
	*x = FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unreal_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings) ProtoMessage() {}

func (x *FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings) ProtoReflect() protoreflect.Message {
	mi := &file_unreal_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings.ProtoReflect.Descriptor instead.
func (*FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings) Descriptor() ([]byte, []int) {
	return file_unreal_common_proto_rawDescGZIP(), []int{11, 0, 0}
}

func (x *FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings) GetSetVelocity() *FVector {
	if x != nil {
		return x.SetVelocity
	}
	return nil
}

func (x *FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings) GetClampVelocity() float32 {
	if x != nil && x.ClampVelocity != nil {
		return *x.ClampVelocity
	}
	return 0
}

var File_unreal_common_proto protoreflect.FileDescriptor

var file_unreal_common_proto_rawDesc = []byte{
	0x0a, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x22,
	0x54, 0x0a, 0x07, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x01, 0x78, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x01, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x11, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x01, 0x7a,
	0x88, 0x01, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x78, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x79, 0x42,
	0x04, 0x0a, 0x02, 0x5f, 0x7a, 0x22, 0xde, 0x02, 0x0a, 0x0f, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x47, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x47, 0x55, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x47, 0x55, 0x49, 0x44, 0x42, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x47, 0x55, 0x49, 0x44, 0x42,
	0x75, 0x6e, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x62, 0x75, 0x6e, 0x63, 0x68,
	0x42, 0x69, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52,
	0x0c, 0x62, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x69, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01,
	0x1a, 0x66, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x47, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x47, 0x55, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x47, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x47, 0x55, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65, 0x74,
	0x47, 0x55, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x74, 0x47, 0x55, 0x49, 0x44,
	0x42, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x75, 0x6e, 0x63, 0x68, 0x42,
	0x69, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62,
	0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x72, 0x0a, 0x12, 0x53, 0x70, 0x61, 0x77, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x03, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xc5, 0x03, 0x0a, 0x0c,
	0x46, 0x52, 0x65, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0e,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e,
	0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0f,
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62,
	0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0f, 0x61, 0x6e, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e,
	0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x62, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x15, 0x62, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x52, 0x65, 0x70, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0b, 0x62, 0x52, 0x65, 0x70, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x52, 0x65, 0x70, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x0e, 0x46, 0x52, 0x65, 0x70, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22,
	0x89, 0x06, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x12, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x12, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x04, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x07, 0x62, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x54, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x08, 0x62, 0x54, 0x65, 0x61, 0x72, 0x4f, 0x66,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x62, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0d, 0x62,
	0x43, 0x61, 0x6e, 0x42, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x08,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x52, 0x65, 0x70, 0x4d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x15,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x52, 0x65, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x0a, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e,
	0x49, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x54, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x43,
	0x61, 0x6e, 0x42, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x13,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x09, 0x62, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x09, 0x62, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x49, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa8, 0x08, 0x0a, 0x13, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x11, 0x62, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x62, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x62, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11, 0x62,
	0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x62, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0e, 0x62,
	0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x62, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x08, 0x62, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x11, 0x62, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x42, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x11,
	0x62, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x42, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x1f, 0x62, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52,
	0x1f, 0x62, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x1f, 0x62, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x6e,
	0x61, 0x70, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x1f,
	0x62, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x6c, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x48, 0x07, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2f, 0x0a,
	0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48,
	0x0a, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x0b, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62,
	0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x42, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x62, 0x53, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x68,
	0x65, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x62,
	0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x22, 0x8b, 0x04, 0x0a, 0x12, 0x46, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x62, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x62, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e,
	0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x61, 0x73, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x17, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x48, 0x61, 0x73, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x62, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x11, 0x62, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x62, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x12, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48,
	0x61, 0x73, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x61, 0x73, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x48, 0x61, 0x73, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0xf5,
	0x17, 0x0a, 0x15, 0x46, 0x52, 0x65, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x49, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x61,
	0x6e, 0x69, 0x6d, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x01, 0x52, 0x0b, 0x61,
	0x6e, 0x69, 0x6d, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x48, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e,
	0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x04, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x48, 0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14,
	0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x42, 0x6f, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x14, 0x6d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x42, 0x6f, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x62, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x07, 0x52, 0x11, 0x62, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x62, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x11, 0x62, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x17, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x52, 0x65, 0x70, 0x52, 0x6f, 0x6f, 0x74,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x52,
	0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x09, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x0a, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70,
	0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x0b, 0x52, 0x0e, 0x6c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x1a, 0xf0,
	0x09, 0x0a, 0x11, 0x46, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x07, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x62, 0x49, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0d, 0x62, 0x49, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x62, 0x4e, 0x65,
	0x65, 0x64, 0x73, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x63,
	0x68, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x16, 0x62, 0x4e, 0x65,
	0x65, 0x64, 0x73, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x63,
	0x68, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x62, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x18, 0x62, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x6d, 0x6f, 0x6f, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x62, 0x48, 0x61, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0d, 0x52, 0x0e, 0x62, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0e, 0x52, 0x0b, 0x62, 0x6c, 0x65,
	0x6e, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x8c, 0x01, 0x0a, 0x14,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x52, 0x65, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x52, 0x6f, 0x6f,
	0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x52,
	0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x0f, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x1a, 0xcc, 0x01, 0x0a, 0x21, 0x46,
	0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x17, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0d, 0x63, 0x6c,
	0x61, 0x6d, 0x70, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x74, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x61, 0x6d,
	0x70, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x62, 0x49, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x62, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x62, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x6d, 0x6f, 0x6f,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x48, 0x61, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6c, 0x65,
	0x6e, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0xc7, 0x06, 0x0a, 0x16, 0x46, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5f, 0x0a, 0x11,
	0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x70, 0x62, 0x2e, 0x46, 0x52, 0x65, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x72, 0x6f, 0x6f, 0x74,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x73, 0x0a,
	0x1b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x52,
	0x65, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x2e, 0x46, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x1b, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64,
	0x64, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x13, 0x62, 0x48, 0x61, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x13, 0x62, 0x48, 0x61, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x62, 0x48, 0x61,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x13, 0x62, 0x48, 0x61, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x5f, 0x0a, 0x28, 0x62, 0x48, 0x61, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5a, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x28, 0x62, 0x48, 0x61, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5a, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x1a, 0x62, 0x49, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x1a, 0x62, 0x49, 0x73, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x65,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70,
	0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x05, 0x52, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x48, 0x61, 0x73,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x62, 0x48, 0x61, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x62, 0x48, 0x61, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5a, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x62, 0x49, 0x73, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x62, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6e,
	0x69, 0x6d, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x42, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0xf7, 0x05, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x72, 0x6f, 0x6f,
	0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x52, 0x65, 0x70, 0x52, 0x6f, 0x6f,
	0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70,
	0x62, 0x2e, 0x46, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x22, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x49, 0x73, 0x43, 0x72, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0b, 0x62,
	0x49, 0x73, 0x43, 0x72, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x18, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x73, 0x4a, 0x75, 0x6d, 0x70, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x18, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x73, 0x4a, 0x75, 0x6d, 0x70, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x1e, 0x61, 0x6e, 0x69, 0x6d, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x1e, 0x61, 0x6e, 0x69, 0x6d, 0x52, 0x6f,
	0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x22, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x49,
	0x73, 0x43, 0x72, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x62, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x49, 0x73, 0x4a, 0x75, 0x6d, 0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x52,
	0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x5d, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x73, 0x4e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x69, 0x74, 0x73, 0x22,
	0x65, 0x0a, 0x29, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x69, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x69, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x42, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x69, 0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x02, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x69, 0x6e, 0x67,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x7d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x04, 0x70, 0x61, 0x77, 0x6e, 0x22, 0x8f,
	0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x7e, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x62, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x22, 0xc6, 0x01, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70,
	0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d,
	0x73, 0x70, 0x61, 0x77, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x2a, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x4c, 0x6f,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x4c,
	0x6f, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x50, 0x69, 0x74, 0x63, 0x68, 0x41, 0x6e,
	0x64, 0x59, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x61, 0x6d, 0x50,
	0x69, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x59, 0x61, 0x77, 0x22, 0x60, 0x0a, 0x24, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x48, 0x55, 0x44, 0x5f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x68, 0x75, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x75, 0x64, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x68, 0x75, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x01, 0x0a,
	0x2b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x6c, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x22, 0x5d, 0x0a, 0x30, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x3e, 0x0a, 0x2a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63,
	0x61, 0x70, 0x22, 0x56, 0x0a, 0x25, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x70,
	0x61, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x52, 0x04, 0x70, 0x61, 0x77, 0x6e, 0x22, 0x4d, 0x0a, 0x2b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x43, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x77, 0x43, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x30, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a,
	0x04, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x04, 0x70, 0x61, 0x77, 0x6e, 0x22, 0x8a, 0x01, 0x0a,
	0x32, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x12, 0x29,
	0x0a, 0x06, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x46, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x74, 0x22, 0x64, 0x0a, 0x33, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50,
	0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2d, 0x0a, 0x04, 0x70, 0x61, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x04, 0x70, 0x61, 0x77, 0x6e, 0x22,
	0x45, 0x0a, 0x27, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x74, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x35, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x13, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31,
	0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x12, 0x41,
	0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x70,
	0x62, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xe3, 0x02, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x67, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1a, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x02, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x17, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x61, 0x73, 0x42, 0x65, 0x67, 0x75, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x17, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x61, 0x73, 0x42, 0x65, 0x67, 0x75, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x1d, 0x0a, 0x1b,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x62, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x42, 0x65,
	0x67, 0x75, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x42, 0x2c, 0x5a, 0x2a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x64, 0x2e, 0x63, 0x6c, 0x65, 0x77, 0x63, 0x61, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_unreal_common_proto_rawDescOnce sync.Once
	file_unreal_common_proto_rawDescData = file_unreal_common_proto_rawDesc
)

func file_unreal_common_proto_rawDescGZIP() []byte {
	file_unreal_common_proto_rawDescOnce.Do(func() {
		file_unreal_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_unreal_common_proto_rawDescData)
	})
	return file_unreal_common_proto_rawDescData
}

var file_unreal_common_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_unreal_common_proto_goTypes = []interface{}{
	(*FVector)(nil),                                                                   // 0: unrealpb.FVector
	(*UnrealObjectRef)(nil),                                                           // 1: unrealpb.UnrealObjectRef
	(*ActorComponentRef)(nil),                                                         // 2: unrealpb.ActorComponentRef
	(*RemoteFunctionMessage)(nil),                                                     // 3: unrealpb.RemoteFunctionMessage
	(*SpawnObjectMessage)(nil),                                                        // 4: unrealpb.SpawnObjectMessage
	(*FRepMovement)(nil),                                                              // 5: unrealpb.FRepMovement
	(*FRepAttachment)(nil),                                                            // 6: unrealpb.FRepAttachment
	(*ActorState)(nil),                                                                // 7: unrealpb.ActorState
	(*ActorComponentState)(nil),                                                       // 8: unrealpb.ActorComponentState
	(*SceneComponentState)(nil),                                                       // 9: unrealpb.SceneComponentState
	(*FBasedMovementInfo)(nil),                                                        // 10: unrealpb.FBasedMovementInfo
	(*FRepRootMotionMontage)(nil),                                                     // 11: unrealpb.FRepRootMotionMontage
	(*CharacterState)(nil),                                                            // 12: unrealpb.CharacterState
	(*Character_ServerMovePacked_Params)(nil),                                         // 13: unrealpb.Character_ServerMovePacked_Params
	(*Character_ClientMoveResponsePacked_Params)(nil),                                 // 14: unrealpb.Character_ClientMoveResponsePacked_Params
	(*PlayerState)(nil),                                                               // 15: unrealpb.PlayerState
	(*ControllerState)(nil),                                                           // 16: unrealpb.ControllerState
	(*Controller_ClientSetLocation_Params)(nil),                                       // 17: unrealpb.Controller_ClientSetLocation_Params
	(*Controller_ClientSetRotation_Params)(nil),                                       // 18: unrealpb.Controller_ClientSetRotation_Params
	(*PlayerControllerState)(nil),                                                     // 19: unrealpb.PlayerControllerState
	(*PlayerController_ServerUpdateCamera_Params)(nil),                                // 20: unrealpb.PlayerController_ServerUpdateCamera_Params
	(*PlayerController_ClientSetHUD_Params)(nil),                                      // 21: unrealpb.PlayerController_ClientSetHUD_Params
	(*PlayerController_ClientSetViewTarget_Params)(nil),                               // 22: unrealpb.PlayerController_ClientSetViewTarget_Params
	(*PlayerController_ClientEnableNetworkVoice_Params)(nil),                          // 23: unrealpb.PlayerController_ClientEnableNetworkVoice_Params
	(*PlayerController_ClientCapBandwidth_Params)(nil),                                // 24: unrealpb.PlayerController_ClientCapBandwidth_Params
	(*PlayerController_ClientRestart_Params)(nil),                                     // 25: unrealpb.PlayerController_ClientRestart_Params
	(*PlayerController_ClientSetCameraMode_Params)(nil),                               // 26: unrealpb.PlayerController_ClientSetCameraMode_Params
	(*PlayerController_ClientRetryClientRestart_Params)(nil),                          // 27: unrealpb.PlayerController_ClientRetryClientRestart_Params
	(*PlayerController_ServerSetSpectatorLocation_Params)(nil),                        // 28: unrealpb.PlayerController_ServerSetSpectatorLocation_Params
	(*PlayerController_ServerAcknowledgePossession_Params)(nil),                       // 29: unrealpb.PlayerController_ServerAcknowledgePossession_Params
	(*PlayerController_ClientGotoState_Params)(nil),                                   // 30: unrealpb.PlayerController_ClientGotoState_Params
	(*PlayerController_ClientReceiveLocalizedMessage_Params)(nil),                     // 31: unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params
	(*GameStateBase)(nil),                                                             // 32: unrealpb.GameStateBase
	(*UnrealObjectRef_GuidCachedObject)(nil),                                          // 33: unrealpb.UnrealObjectRef.GuidCachedObject
	(*FRepRootMotionMontage_FRootMotionSource)(nil),                                   // 34: unrealpb.FRepRootMotionMontage.FRootMotionSource
	(*FRepRootMotionMontage_FRootMotionSourceGroup)(nil),                              // 35: unrealpb.FRepRootMotionMontage.FRootMotionSourceGroup
	(*FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings)(nil), // 36: unrealpb.FRepRootMotionMontage.FRootMotionSource.FRootMotionFinishVelocitySettings
}
var file_unreal_common_proto_depIdxs = []int32{
	33, // 0: unrealpb.UnrealObjectRef.context:type_name -> unrealpb.UnrealObjectRef.GuidCachedObject
	1,  // 1: unrealpb.ActorComponentRef.owner:type_name -> unrealpb.UnrealObjectRef
	1,  // 2: unrealpb.RemoteFunctionMessage.targetObj:type_name -> unrealpb.UnrealObjectRef
	1,  // 3: unrealpb.SpawnObjectMessage.obj:type_name -> unrealpb.UnrealObjectRef
	0,  // 4: unrealpb.FRepMovement.linearVelocity:type_name -> unrealpb.FVector
	0,  // 5: unrealpb.FRepMovement.angularVelocity:type_name -> unrealpb.FVector
	0,  // 6: unrealpb.FRepMovement.location:type_name -> unrealpb.FVector
	0,  // 7: unrealpb.FRepMovement.rotation:type_name -> unrealpb.FVector
	1,  // 8: unrealpb.FRepAttachment.attachParent:type_name -> unrealpb.UnrealObjectRef
	0,  // 9: unrealpb.FRepAttachment.locationOffset:type_name -> unrealpb.FVector
	0,  // 10: unrealpb.FRepAttachment.relativeScale:type_name -> unrealpb.FVector
	0,  // 11: unrealpb.FRepAttachment.rotationOffset:type_name -> unrealpb.FVector
	2,  // 12: unrealpb.FRepAttachment.attachComponent:type_name -> unrealpb.ActorComponentRef
	1,  // 13: unrealpb.ActorState.owner:type_name -> unrealpb.UnrealObjectRef
	1,  // 14: unrealpb.ActorState.instigator:type_name -> unrealpb.UnrealObjectRef
	5,  // 15: unrealpb.ActorState.replicatedMovement:type_name -> unrealpb.FRepMovement
	6,  // 16: unrealpb.ActorState.attachmentReplication:type_name -> unrealpb.FRepAttachment
	2,  // 17: unrealpb.SceneComponentState.attachParent:type_name -> unrealpb.ActorComponentRef
	2,  // 18: unrealpb.SceneComponentState.attachChildren:type_name -> unrealpb.ActorComponentRef
	0,  // 19: unrealpb.SceneComponentState.relativeLocation:type_name -> unrealpb.FVector
	0,  // 20: unrealpb.SceneComponentState.relativeRotation:type_name -> unrealpb.FVector
	0,  // 21: unrealpb.SceneComponentState.relativeScale:type_name -> unrealpb.FVector
	2,  // 22: unrealpb.FBasedMovementInfo.movementBase:type_name -> unrealpb.ActorComponentRef
	0,  // 23: unrealpb.FBasedMovementInfo.location:type_name -> unrealpb.FVector
	0,  // 24: unrealpb.FBasedMovementInfo.rotation:type_name -> unrealpb.FVector
	1,  // 25: unrealpb.FRepRootMotionMontage.animMontage:type_name -> unrealpb.UnrealObjectRef
	0,  // 26: unrealpb.FRepRootMotionMontage.location:type_name -> unrealpb.FVector
	0,  // 27: unrealpb.FRepRootMotionMontage.rotation:type_name -> unrealpb.FVector
	2,  // 28: unrealpb.FRepRootMotionMontage.movementBase:type_name -> unrealpb.ActorComponentRef
	35, // 29: unrealpb.FRepRootMotionMontage.authoritativeRootMotion:type_name -> unrealpb.FRepRootMotionMontage.FRootMotionSourceGroup
	0,  // 30: unrealpb.FRepRootMotionMontage.acceleration:type_name -> unrealpb.FVector
	0,  // 31: unrealpb.FRepRootMotionMontage.linearVelocity:type_name -> unrealpb.FVector
	11, // 32: unrealpb.CharacterState.rootMotion:type_name -> unrealpb.FRepRootMotionMontage
	10, // 33: unrealpb.CharacterState.basedMovement:type_name -> unrealpb.FBasedMovementInfo
	1,  // 34: unrealpb.ControllerState.playerState:type_name -> unrealpb.UnrealObjectRef
	1,  // 35: unrealpb.ControllerState.pawn:type_name -> unrealpb.UnrealObjectRef
	0,  // 36: unrealpb.Controller_ClientSetLocation_Params.newLocation:type_name -> unrealpb.FVector
	0,  // 37: unrealpb.Controller_ClientSetLocation_Params.newRotation:type_name -> unrealpb.FVector
	0,  // 38: unrealpb.Controller_ClientSetRotation_Params.newRotation:type_name -> unrealpb.FVector
	0,  // 39: unrealpb.PlayerControllerState.targetViewRotation:type_name -> unrealpb.FVector
	0,  // 40: unrealpb.PlayerControllerState.spawnLocation:type_name -> unrealpb.FVector
	0,  // 41: unrealpb.PlayerController_ServerUpdateCamera_Params.camLoc:type_name -> unrealpb.FVector
	1,  // 42: unrealpb.PlayerController_ClientSetViewTarget_Params.actor:type_name -> unrealpb.UnrealObjectRef
	1,  // 43: unrealpb.PlayerController_ClientRestart_Params.pawn:type_name -> unrealpb.UnrealObjectRef
	1,  // 44: unrealpb.PlayerController_ClientRetryClientRestart_Params.pawn:type_name -> unrealpb.UnrealObjectRef
	0,  // 45: unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newLoc:type_name -> unrealpb.FVector
	0,  // 46: unrealpb.PlayerController_ServerSetSpectatorLocation_Params.newRot:type_name -> unrealpb.FVector
	1,  // 47: unrealpb.PlayerController_ServerAcknowledgePossession_Params.pawn:type_name -> unrealpb.UnrealObjectRef
	1,  // 48: unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_1:type_name -> unrealpb.UnrealObjectRef
	1,  // 49: unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.relatedPlayerState_2:type_name -> unrealpb.UnrealObjectRef
	1,  // 50: unrealpb.PlayerController_ClientReceiveLocalizedMessage_Params.optionalObject:type_name -> unrealpb.UnrealObjectRef
	36, // 51: unrealpb.FRepRootMotionMontage.FRootMotionSource.finishVelocityParams:type_name -> unrealpb.FRepRootMotionMontage.FRootMotionSource.FRootMotionFinishVelocitySettings
	34, // 52: unrealpb.FRepRootMotionMontage.FRootMotionSourceGroup.rootMotionSources:type_name -> unrealpb.FRepRootMotionMontage.FRootMotionSource
	34, // 53: unrealpb.FRepRootMotionMontage.FRootMotionSourceGroup.pendingAddRootMotionSources:type_name -> unrealpb.FRepRootMotionMontage.FRootMotionSource
	0,  // 54: unrealpb.FRepRootMotionMontage.FRootMotionSourceGroup.lastPreAdditiveVelocity:type_name -> unrealpb.FVector
	0,  // 55: unrealpb.FRepRootMotionMontage.FRootMotionSource.FRootMotionFinishVelocitySettings.setVelocity:type_name -> unrealpb.FVector
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_unreal_common_proto_init() }
func file_unreal_common_proto_init() {
	if File_unreal_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_unreal_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnrealObjectRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorComponentRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteFunctionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpawnObjectMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRepMovement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRepAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActorComponentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneComponentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FBasedMovementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRepRootMotionMontage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character_ServerMovePacked_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character_ClientMoveResponsePacked_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Controller_ClientSetLocation_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Controller_ClientSetRotation_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerControllerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ServerUpdateCamera_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ClientSetHUD_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ClientSetViewTarget_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ClientEnableNetworkVoice_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ClientCapBandwidth_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ClientRestart_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ClientSetCameraMode_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ClientRetryClientRestart_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ServerSetSpectatorLocation_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ServerAcknowledgePossession_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ClientGotoState_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerController_ClientReceiveLocalizedMessage_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStateBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnrealObjectRef_GuidCachedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRepRootMotionMontage_FRootMotionSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRepRootMotionMontage_FRootMotionSourceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unreal_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRepRootMotionMontage_FRootMotionSource_FRootMotionFinishVelocitySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_unreal_common_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_unreal_common_proto_msgTypes[36].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_unreal_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_unreal_common_proto_goTypes,
		DependencyIndexes: file_unreal_common_proto_depIdxs,
		MessageInfos:      file_unreal_common_proto_msgTypes,
	}.Build()
	File_unreal_common_proto = out.File
	file_unreal_common_proto_rawDesc = nil
	file_unreal_common_proto_goTypes = nil
	file_unreal_common_proto_depIdxs = nil
}
