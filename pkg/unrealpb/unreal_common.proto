syntax = "proto3";

package unrealpb;

option go_package = "channeld.clewcat.com/channeld/pkg/unrealpb";

message FVector {
    float x = 1;
    float y = 2;
    float z = 3;
}

message UnrealObjectRef {
    uint32 netGUID = 1;
    message GuidCachedObject {
        uint32 netGUID = 1;
        string pathName = 2;
        uint32 outerGUID = 3;
    }
    repeated GuidCachedObject context = 2;
    bytes netGUIDBunch = 3;
    uint32 bunchBitsNum = 4;
}

message RemoteFunctionMessage {
    UnrealObjectRef targetObj = 1;
    string functionName = 2;
    bytes paramsPayload = 3;
}

message ActorComponentState {
    optional bool bIsActive = 1;
    optional bool bReplicated = 2;
}

message SceneComponentState {
    // Marks that the state should be removed from the containing map
    bool removed = 1;
    optional bool bAbsoluteLocation = 2;
    optional bool bAbsoluteRotation = 3;
    optional bool bAbsoluteScale = 4;
    optional bool bVisible = 5;
    optional bool bShouldBeAttached = 6;
    optional bool bShouldSnapLocationWhenAttached = 7;
    optional bool bShouldSnapRotationWhenAttached = 8;
    optional UnrealObjectRef attachParent = 9;
    repeated UnrealObjectRef attachChildren = 10;
    optional string attachSocketName = 11;
    optional FVector relativeLocation = 12;
    optional FVector relativeRotation = 13;
    optional FVector relativeScale = 14;
}

message RootMotionMontage {

}

message BasedMovementInfo {
    optional UnrealObjectRef movementBase = 1;
    optional string boneName = 2;
    optional FVector location = 3;
    optional FVector rotation = 4;
    optional bool bServerHasBaseComponent = 5;
    optional bool bRelativeRotation = 6;
    optional bool bServerHasVelocity = 7;
}

message CharacterState {
    // Marks that the state should be removed from the containing map
    bool removed = 1;
    optional RootMotionMontage rootMotion = 2;
    optional BasedMovementInfo basedMovement = 3;
    optional float serverLastTransformUpdateTimeStamp = 4;
    optional uint32 movementMode = 5;
    optional bool bIsCrouched = 6;
    optional bool bProxyIsJumpForceApplied = 7;
    optional float animRootMotionTranslationScale = 8;
    optional float replayLastTransformUpdateTimeStamp = 9;
}

message Character_ServerMovePacked_Params {
    uint32 bitsNum = 1;
    bytes packedBits = 2;
}

message Character_ClientMoveResponsePacked_Params {
    uint32 bitsNum = 1;
    bytes packedBits = 2;
}

message PlayerState {
    optional float score = 1;
    optional int32 playerId = 2;
    optional uint32 ping = 3;
    optional string playerName = 4;
}

message ControllerState {
    // APlayerState is an actor.
    UnrealObjectRef playerState = 1;
    UnrealObjectRef pawn = 2;
}

message Controller_ClientSetLocation_Params {
    FVector newLocation = 1;
    FVector newRotation = 2;
}

message Controller_ClientSetRotation_Params {
    FVector newRotation = 1;
    bool bResetCamera = 2;
}

message PlayerControllerState {
    optional FVector targetViewRotation = 1;
    optional FVector spawnLocation = 2;
}

message PlayerController_ServerUpdateCamera_Params {
    FVector camLoc = 1;
    int32 camPitchAndYaw = 2;
}

message PlayerController_ClientSetHUD_Params {
    optional string hudClassName = 1;
}

message PlayerController_ClientSetViewTarget_Params {
    UnrealObjectRef actor = 1;
    float blendTime = 2;
    uint32 blendFunction = 3;
    float blendExp = 4;
    bool bLockOutgoing = 5;
}

message PlayerController_ClientEnableNetworkVoice_Params {
    optional bool bEnable = 1;
}

message PlayerController_ClientCapBandwidth_Params {
    int32 cap = 1;
}

message PlayerController_ClientRestart_Params {
    UnrealObjectRef pawn = 1;
}

message PlayerController_ClientSetCameraMode_Params {
    string newCamMode = 1;
}

message PlayerController_ClientRetryClientRestart_Params {
    UnrealObjectRef pawn = 1;
}

message PlayerController_ServerSetSpectatorLocation_Params {
    FVector newLoc = 1;
    FVector newRot = 2;
}

message PlayerController_ServerAcknowledgePossession_Params {
    UnrealObjectRef pawn = 1;
}

message GameStateBase {
    optional string spectatorClassName = 1;
    optional string gameModeClassName = 2;
    optional float replicatedWorldTimeSeconds = 3;
    optional bool bReplicatedHasBegunPlay = 4;
}