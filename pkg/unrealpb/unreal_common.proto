syntax = "proto3";

package unrealpb;

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";

option go_package = "github.com/channeldorg/channeld/pkg/unrealpb";

enum MessageType {
    INVALID = 0;

	// Used by LowLevelSend() in NetConnection/NetDriver.
    LOW_LEVEL = 100;

	// Used by ChanneldGameInstanceSubsystem to broadcast the ProtoMessageObject from server side. The message is packed as google::protobuf::any to support anonymous types.
    ANY = 101;

 	// Used by ChanneldNetDriver to send/receive UE's native RPC.
    // See @RemoteFunctionMessage
    RPC = 102;

    // Used by UE servers to spawn objects on the client. 
    // See @SpawnObjectMessage
    SPAWN = 103;
    
    // Used by UE servers to destroy objects on the client.
    // See @DestroyObjectMessage
    DESTROY = 104;

    // Used by the UE servers to sync the NetId of the static and well-known objects.
    SYNC_NET_ID = 107;

    // Deprecated
    SERVER_PLAYER_SPAWNED = 201;

    // Used by the Master server to broadcast the player leave (@UnsubscribedFromChannelResultMessage) to the spatial servers.
    SERVER_PLAYER_LEAVE = 202;
}

enum UnrealObjectType
{
    UOT_Unknown = 0;
    UOT_GameState = 1;
    UOT_Actor = 2;
    UOT_Pawn = 3;
    UOT_Character = 4;
    UOT_PlayerState = 5;
    UOT_Controller = 6;
    UOT_PlayerController = 7;
}

// Maps to UE's FVector AND FRotator struct.
// For FRotator, x = pitch, y = yaw, z = roll
message FVector {
    optional float x = 1;
    optional float y = 2;
    optional float z = 3;
}

message UnrealObjectRef {
    optional uint32 netGUID = 1;
    message GuidCachedObject {
        uint32 netGUID = 1;
        string pathName = 2;
        uint32 outerGUID = 3;
    }
    repeated GuidCachedObject context = 2;
    optional bytes netGUIDBunch = 3;
    optional uint32 bunchBitsNum = 4;
    // optional uint32 objType = 5;
    optional string classPath = 6;
    optional uint32 owningConnId = 7;
}

message ActorComponentRef {
    optional UnrealObjectRef owner = 1;
    optional string compName = 2;
}

message AssetRef {
    string objectPath = 1;
}

message RemoteFunctionMessage {
    UnrealObjectRef targetObj = 1;
    string functionName = 2;
    bytes paramsPayload = 3;
    int32 redirectionCounter = 4;
    string subObjectPath = 5;
}

message SpawnObjectMessage {
    UnrealObjectRef obj = 1;
    optional uint32 channelId = 2;
    optional uint32 localRole = 3;
    // optional uint32 owningConnId = 4;
    // Only used by the spatial channel
    optional FVector location = 5;
}

message DestroyObjectMessage {
    uint32 netId = 1;
    uint32 reason = 2;
}

message HandoverContext {
    UnrealObjectRef obj = 1;
    // The client that owns the object. Only set for Pawns and PlayerControllers.
    optional uint32 clientConnId = 2;
}

// Wrapped in ChannelDataHandoverMessage.data
// Implements [channeld.HandoverDataWithPayload]
message HandoverData {
    repeated HandoverContext context = 1;
    // The channel data message that will be handed over to the destination channel.
    optional google.protobuf.Any channelData = 2;
}

message GetUnrealObjectRefMessage {
    repeated uint32 netGUID = 1;
}

message GetUnrealObjectRefResultMessage {
    repeated UnrealObjectRef objRef = 1;
}

message SyncNetIdMessage {
    message NetIdPath {
        uint32 netId = 1;
        string path = 2;
        optional uint32 outerNetId = 3;
    }
    repeated NetIdPath netIdPaths = 1;
}

message SpatialEntityState {
    UnrealObjectRef objRef = 1;
    bool removed = 2;
    // Full entity channel data. For cross-server handover only.
    optional google.protobuf.Any entityData = 3;
}

message SpatialChannelData {
    map<uint32, SpatialEntityState> entities = 1;
}

message ChannelRecoveryData {
    map<uint32, UnrealObjectRef> objRefs = 1;
}



extend google.protobuf.MessageOptions {
    // Used for tagging the state message with the Unreal class path, so that
    // UChannelDataView::CheckUnspawnedObject can create the object.
    optional string unreal_class_path = 50001;
}

message ActorState {
    option (unreal_class_path) = "/Script/Engine.Actor";
    bool removed = 1;
    optional uint32 owningConnId = 2;
    optional bool bReplicateMovement = 3;
    optional uint32 localRole = 4;
    optional uint32 remoteRole = 5;
    optional UnrealObjectRef owner = 6;
    optional bool bHidden = 7;
    optional bool bTearOff = 8;
    optional bool bCanBeDamaged = 9;
    optional UnrealObjectRef instigator = 10;
    optional FRepMovement replicatedMovement = 11;
    optional FRepAttachment attachmentReplication = 12;
}

message FRepMovement {
    optional FVector linearVelocity = 1;
    optional FVector angularVelocity = 2;
    optional FVector location = 3;
    optional FVector rotation = 4;
    optional bool bSimulatedPhysicSleep = 5;
    optional bool bRepPhysics = 6;
}

message FRepAttachment {
    optional UnrealObjectRef attachParent = 1;
    optional FVector locationOffset = 2;
    optional FVector relativeScale = 3;
    optional FVector rotationOffset = 4;
    optional string attachSocket = 5;
    optional ActorComponentRef attachComponent = 6;
}

message ActorComponentState {
    option (unrealpb.unreal_class_path) = "/Script/Engine.ActorComponent";
    // Marks that the state should be removed from the containing map
    bool removed = 1;
    optional bool bIsActive = 2;
    optional bool bReplicated = 3;
    optional string compName = 4;
}

message ActorComponentStates {
    map<string, ActorComponentState> states = 1;
}

message SceneComponentState {
    option (unrealpb.unreal_class_path) = "/Script/Engine.SceneComponent";
    bool removed = 1;
    optional bool bAbsoluteLocation = 2;
    optional bool bAbsoluteRotation = 3;
    optional bool bAbsoluteScale = 4;
    optional bool bVisible = 5;
    optional bool bShouldBeAttached = 6;
    optional bool bShouldSnapLocationWhenAttached = 7;
    optional bool bShouldSnapRotationWhenAttached = 8;
    optional ActorComponentRef attachParent = 9;
    repeated ActorComponentRef attachChildren = 10;
    optional string attachSocketName = 11;
    optional FVector relativeLocation = 12;
    optional FVector relativeRotation = 13;
    optional FVector relativeScale = 14;
}

message FBasedMovementInfo {
    optional ActorComponentRef movementBase = 1;
    optional string boneName = 2;
    optional FVector location = 3;
    optional FVector rotation = 4;
    optional bool bServerHasBaseComponent = 5;
    optional bool bRelativeRotation = 6;
    optional bool bServerHasVelocity = 7;
}

message FRootMotionSource {
    optional uint32 priority = 1;
    optional uint32 localId = 2;
    optional uint32 accumulatedMode = 3;
    optional string instanceName = 4;
    optional float startTime = 5;
    optional float currentTime = 6;
    optional float previousTime = 7;
    optional float duration = 8;
    optional uint32 status = 9;
    optional uint32 settings = 10;
    optional bool bInLocalSpace = 11;
    optional bool bNeedsSimulatedCatchup = 12;
    optional bool bSimulatedNeedsSmoothing = 13;
    optional bool bHasRootMotion = 14;
    optional float blendWeight = 15;
    message FRootMotionFinishVelocitySettings {
        optional uint32 mode = 1;
        optional FVector setVelocity = 2;
        optional float clampVelocity = 3;
    }
    optional FRootMotionFinishVelocitySettings finishVelocityParams = 16;
}

message FRootMotionSourceGroup {
    repeated FRootMotionSource rootMotionSources = 1;
    repeated FRootMotionSource pendingAddRootMotionSources = 2;
    optional bool bHasAdditiveSources = 3;
    optional bool bHasOverrideSources = 4;
    optional bool bHasOverrideSourcesWithIgnoreZAccumulate = 5;
    optional bool bIsAdditiveVelocityApplied = 6;
    optional uint32 lastAccumulatedSettings = 7;
    optional FVector lastPreAdditiveVelocity = 8;
}

message FRepRootMotionMontage {
    optional bool bIsActive = 1;
    optional UnrealObjectRef animMontage = 2;
    optional float position = 3;
    optional FVector location = 4;
    optional FVector rotation = 5;
    optional ActorComponentRef movementBase = 6;
    optional string movementBaseBoneName = 7;
    optional bool bRelativePosition = 8;
    optional bool bRelativeRotation = 9;
    optional FRootMotionSourceGroup authoritativeRootMotion = 10;
    optional FVector acceleration = 11;
    optional FVector linearVelocity = 12;
}

message CharacterState {
    option (unrealpb.unreal_class_path) = "/Script/Engine.Character";
    optional FRepRootMotionMontage rootMotion = 2;
    optional FBasedMovementInfo basedMovement = 3;
    optional float serverLastTransformUpdateTimeStamp = 4;
    optional uint32 movementMode = 5;
    optional bool bIsCrouched = 6;
    optional bool bProxyIsJumpForceApplied = 7;
    optional float animRootMotionTranslationScale = 8;
    optional float replayLastTransformUpdateTimeStamp = 9;
}

message Character_ServerMovePacked_Params {
    uint32 bitsNum = 1;
    bytes packedBits = 2;
}

message Character_ClientMoveResponsePacked_Params {
    uint32 bitsNum = 1;
    bytes packedBits = 2;
}

// DO NOT modify. Since v0.7.4, this message is only used in tests and benchmarks. 
message PlayerState {
    optional float score = 2;
    optional int32 playerId = 3;
    optional uint32 ping = 4;
    optional string playerName = 5;
}

message ControllerState {
    option (unrealpb.unreal_class_path) = "/Script/Engine.Controller";
    // APlayerState is an actor.
    UnrealObjectRef playerState = 2;
    UnrealObjectRef pawn = 3;
}

message Controller_ClientSetLocation_Params {
    FVector newLocation = 1;
    FVector newRotation = 2;
}

message Controller_ClientSetRotation_Params {
    FVector newRotation = 1;
    bool bResetCamera = 2;
}

// DO NOT modify. Since v0.7.2, this message is only used in tests and benchmarks. 
message PlayerControllerState {
    option (unrealpb.unreal_class_path) = "/Script/Engine.PlayerController";
    optional FVector targetViewRotation = 2;
    optional FVector spawnLocation = 3;
}

message PlayerController_ServerUpdateCamera_Params {
    FVector camLoc = 1;
    int32 camPitchAndYaw = 2;
}

message PlayerController_ClientSetHUD_Params {
    optional string hudClassName = 1;
}

message PlayerController_ClientSetViewTarget_Params {
    UnrealObjectRef actor = 1;
    float blendTime = 2;
    uint32 blendFunction = 3;
    float blendExp = 4;
    bool bLockOutgoing = 5;
}

message PlayerController_ClientEnableNetworkVoice_Params {
    optional bool bEnable = 1;
}

message PlayerController_ClientCapBandwidth_Params {
    int32 cap = 1;
}

message PlayerController_ClientRestart_Params {
    UnrealObjectRef pawn = 1;
}

message PlayerController_ClientSetCameraMode_Params {
    string newCamMode = 1;
}

message PlayerController_ClientRetryClientRestart_Params {
    UnrealObjectRef pawn = 1;
}

message PlayerController_ServerSetSpectatorLocation_Params {
    FVector newLoc = 1;
    FVector newRot = 2;
}

message PlayerController_ServerAcknowledgePossession_Params {
    UnrealObjectRef pawn = 1;
}

message PlayerController_ClientGotoState_Params {
    string newState = 1;
}

message PlayerController_ClientReceiveLocalizedMessage_Params {
    string message = 1;
    int32 switch = 2;
    UnrealObjectRef relatedPlayerState_1 = 3;
    UnrealObjectRef relatedPlayerState_2 = 4;
    UnrealObjectRef optionalObject = 5;
}

message GameStateBase {
    option (unrealpb.unreal_class_path) = "/Script/Engine.GameStateBase";
    optional string spectatorClassName = 2;
    optional string gameModeClassName = 3;
    // Compatible with UE 5.2+
    optional double replicatedWorldTimeSeconds = 4;
    optional bool bReplicatedHasBegunPlay = 5;
}

message PawnState {
    option (unrealpb.unreal_class_path) = "/Script/Engine.Pawn";
    UnrealObjectRef playerState = 1;
    UnrealObjectRef controller = 2;
    optional uint32 remoteViewPitch = 3;
}

// For customized FCharacterMoveResponseDataContainer::Serialize
message FClientAdjustment {
    optional bool bAckGoodMove = 1;
    optional float timeStamp = 2;
    optional FVector newLoc = 3;
    optional FVector newVel = 4;
    optional FVector newRot = 5;
    optional UnrealObjectRef newBase = 6;
    optional string newBaseBoneName = 7;
    optional bool bBaseRelativePosition = 8;
    optional FRootMotionSourceGroup rootMotionSourceCorrection = 9;
    optional FVector rootMotionRotation = 10;
    optional uint32 movementMode = 11;
}

message StaticMeshComponentState {
    option (unrealpb.unreal_class_path) = "/Script/Engine.StaticMeshComponent";
    bool removed = 1;
    AssetRef staticMesh = 2;
}
