// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

package channeldpb

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TestChannelDataMessage struct {
	Text string `protobuf:"bytes,1,req,name=text" json:"text"`
	Num  uint32 `protobuf:"varint,2,req,name=num" json:"num"`
}

func (m *TestChannelDataMessage) Reset()      { *m = TestChannelDataMessage{} }
func (*TestChannelDataMessage) ProtoMessage() {}
func (*TestChannelDataMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}
func (m *TestChannelDataMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestChannelDataMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestChannelDataMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestChannelDataMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestChannelDataMessage.Merge(m, src)
}
func (m *TestChannelDataMessage) XXX_Size() int {
	return m.Size()
}
func (m *TestChannelDataMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestChannelDataMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestChannelDataMessage proto.InternalMessageInfo

func (m *TestChannelDataMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TestChannelDataMessage) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type TestMergeMessage struct {
	List []string                                  `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Kv   map[int64]*TestMergeMessage_StringWrapper `protobuf:"bytes,2,rep,name=kv" json:"kv,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TestMergeMessage) Reset()      { *m = TestMergeMessage{} }
func (*TestMergeMessage) ProtoMessage() {}
func (*TestMergeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}
func (m *TestMergeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMergeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMergeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMergeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMergeMessage.Merge(m, src)
}
func (m *TestMergeMessage) XXX_Size() int {
	return m.Size()
}
func (m *TestMergeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMergeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestMergeMessage proto.InternalMessageInfo

func (m *TestMergeMessage) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TestMergeMessage) GetKv() map[int64]*TestMergeMessage_StringWrapper {
	if m != nil {
		return m.Kv
	}
	return nil
}

type TestMergeMessage_StringWrapper struct {
	Removed bool   `protobuf:"varint,1,req,name=removed" json:"removed"`
	Content string `protobuf:"bytes,2,req,name=content" json:"content"`
}

func (m *TestMergeMessage_StringWrapper) Reset()      { *m = TestMergeMessage_StringWrapper{} }
func (*TestMergeMessage_StringWrapper) ProtoMessage() {}
func (*TestMergeMessage_StringWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1, 0}
}
func (m *TestMergeMessage_StringWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMergeMessage_StringWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMergeMessage_StringWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMergeMessage_StringWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMergeMessage_StringWrapper.Merge(m, src)
}
func (m *TestMergeMessage_StringWrapper) XXX_Size() int {
	return m.Size()
}
func (m *TestMergeMessage_StringWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMergeMessage_StringWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_TestMergeMessage_StringWrapper proto.InternalMessageInfo

func (m *TestMergeMessage_StringWrapper) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func (m *TestMergeMessage_StringWrapper) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type TestMapMessage struct {
	Kv  map[uint32]string                        `protobuf:"bytes,1,rep,name=kv" json:"kv,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Kv2 map[uint32]*TestMapMessage_StringWrapper `protobuf:"bytes,2,rep,name=kv2" json:"kv2,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TestMapMessage) Reset()      { *m = TestMapMessage{} }
func (*TestMapMessage) ProtoMessage() {}
func (*TestMapMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}
func (m *TestMapMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMapMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMapMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMapMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMapMessage.Merge(m, src)
}
func (m *TestMapMessage) XXX_Size() int {
	return m.Size()
}
func (m *TestMapMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMapMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestMapMessage proto.InternalMessageInfo

func (m *TestMapMessage) GetKv() map[uint32]string {
	if m != nil {
		return m.Kv
	}
	return nil
}

func (m *TestMapMessage) GetKv2() map[uint32]*TestMapMessage_StringWrapper {
	if m != nil {
		return m.Kv2
	}
	return nil
}

type TestMapMessage_StringWrapper struct {
	Content string `protobuf:"bytes,1,req,name=content" json:"content"`
	Num     int64  `protobuf:"varint,2,req,name=num" json:"num"`
}

func (m *TestMapMessage_StringWrapper) Reset()      { *m = TestMapMessage_StringWrapper{} }
func (*TestMapMessage_StringWrapper) ProtoMessage() {}
func (*TestMapMessage_StringWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2, 1}
}
func (m *TestMapMessage_StringWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestMapMessage_StringWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestMapMessage_StringWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestMapMessage_StringWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMapMessage_StringWrapper.Merge(m, src)
}
func (m *TestMapMessage_StringWrapper) XXX_Size() int {
	return m.Size()
}
func (m *TestMapMessage_StringWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMapMessage_StringWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_TestMapMessage_StringWrapper proto.InternalMessageInfo

func (m *TestMapMessage_StringWrapper) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *TestMapMessage_StringWrapper) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type TestFieldMaskMessage struct {
	Name string                                        `protobuf:"bytes,1,req,name=name" json:"name"`
	Msg  *TestFieldMaskMessage_NestedMessage           `protobuf:"bytes,2,req,name=msg" json:"msg,omitempty"`
	List []*TestFieldMaskMessage_NestedMessage         `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Kv1  map[int64]*TestFieldMaskMessage_NestedMessage `protobuf:"bytes,4,rep,name=kv1" json:"kv1,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Kv2  map[int64]string                              `protobuf:"bytes,5,rep,name=kv2" json:"kv2,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TestFieldMaskMessage) Reset()      { *m = TestFieldMaskMessage{} }
func (*TestFieldMaskMessage) ProtoMessage() {}
func (*TestFieldMaskMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{3}
}
func (m *TestFieldMaskMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestFieldMaskMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestFieldMaskMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestFieldMaskMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestFieldMaskMessage.Merge(m, src)
}
func (m *TestFieldMaskMessage) XXX_Size() int {
	return m.Size()
}
func (m *TestFieldMaskMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestFieldMaskMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestFieldMaskMessage proto.InternalMessageInfo

func (m *TestFieldMaskMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TestFieldMaskMessage) GetMsg() *TestFieldMaskMessage_NestedMessage {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *TestFieldMaskMessage) GetList() []*TestFieldMaskMessage_NestedMessage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TestFieldMaskMessage) GetKv1() map[int64]*TestFieldMaskMessage_NestedMessage {
	if m != nil {
		return m.Kv1
	}
	return nil
}

func (m *TestFieldMaskMessage) GetKv2() map[int64]string {
	if m != nil {
		return m.Kv2
	}
	return nil
}

type TestFieldMaskMessage_NestedMessage struct {
	P1 int64  `protobuf:"varint,1,req,name=p1" json:"p1"`
	P2 uint32 `protobuf:"varint,2,req,name=p2" json:"p2"`
}

func (m *TestFieldMaskMessage_NestedMessage) Reset()      { *m = TestFieldMaskMessage_NestedMessage{} }
func (*TestFieldMaskMessage_NestedMessage) ProtoMessage() {}
func (*TestFieldMaskMessage_NestedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{3, 0}
}
func (m *TestFieldMaskMessage_NestedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestFieldMaskMessage_NestedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestFieldMaskMessage_NestedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestFieldMaskMessage_NestedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestFieldMaskMessage_NestedMessage.Merge(m, src)
}
func (m *TestFieldMaskMessage_NestedMessage) XXX_Size() int {
	return m.Size()
}
func (m *TestFieldMaskMessage_NestedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestFieldMaskMessage_NestedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestFieldMaskMessage_NestedMessage proto.InternalMessageInfo

func (m *TestFieldMaskMessage_NestedMessage) GetP1() int64 {
	if m != nil {
		return m.P1
	}
	return 0
}

func (m *TestFieldMaskMessage_NestedMessage) GetP2() uint32 {
	if m != nil {
		return m.P2
	}
	return 0
}

func init() {
	proto.RegisterType((*TestChannelDataMessage)(nil), "channeldpb.TestChannelDataMessage")
	proto.RegisterType((*TestMergeMessage)(nil), "channeldpb.TestMergeMessage")
	proto.RegisterMapType((map[int64]*TestMergeMessage_StringWrapper)(nil), "channeldpb.TestMergeMessage.KvEntry")
	proto.RegisterType((*TestMergeMessage_StringWrapper)(nil), "channeldpb.TestMergeMessage.StringWrapper")
	proto.RegisterType((*TestMapMessage)(nil), "channeldpb.TestMapMessage")
	proto.RegisterMapType((map[uint32]*TestMapMessage_StringWrapper)(nil), "channeldpb.TestMapMessage.Kv2Entry")
	proto.RegisterMapType((map[uint32]string)(nil), "channeldpb.TestMapMessage.KvEntry")
	proto.RegisterType((*TestMapMessage_StringWrapper)(nil), "channeldpb.TestMapMessage.StringWrapper")
	proto.RegisterType((*TestFieldMaskMessage)(nil), "channeldpb.TestFieldMaskMessage")
	proto.RegisterMapType((map[int64]*TestFieldMaskMessage_NestedMessage)(nil), "channeldpb.TestFieldMaskMessage.Kv1Entry")
	proto.RegisterMapType((map[int64]string)(nil), "channeldpb.TestFieldMaskMessage.Kv2Entry")
	proto.RegisterType((*TestFieldMaskMessage_NestedMessage)(nil), "channeldpb.TestFieldMaskMessage.NestedMessage")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0xf5, 0x9d, 0x53, 0xb5, 0xfd, 0xa2, 0x00, 0x3a, 0x55, 0x95, 0xe5, 0xe1, 0x88, 0x02, 0x83,
	0x61, 0x70, 0x65, 0x0b, 0x24, 0x44, 0x25, 0x54, 0x42, 0x0b, 0x12, 0x55, 0x40, 0x0a, 0x48, 0x48,
	0x6c, 0xa6, 0x39, 0x4c, 0xe4, 0xc4, 0xb1, 0xec, 0xab, 0x45, 0x36, 0x7e, 0x02, 0x13, 0x2b, 0x2b,
	0x3f, 0xa5, 0x63, 0xc6, 0x4e, 0x88, 0x38, 0x0b, 0x1b, 0xfd, 0x09, 0xe8, 0xce, 0xbe, 0xc6, 0x0e,
	0x69, 0x68, 0xb6, 0xe4, 0xbb, 0x7b, 0xcf, 0xef, 0xbd, 0xef, 0x1d, 0x00, 0x67, 0x09, 0xb7, 0xa3,
	0x78, 0xc4, 0x47, 0x04, 0x4e, 0x3e, 0x79, 0x61, 0xc8, 0x06, 0xbd, 0xe8, 0x43, 0xeb, 0x25, 0xec,
	0xbe, 0x65, 0x09, 0x7f, 0x96, 0x4f, 0x0e, 0x3d, 0xee, 0x75, 0x58, 0x92, 0x78, 0x3e, 0x23, 0x06,
	0xd4, 0x38, 0xfb, 0xcc, 0x0d, 0xd4, 0xc4, 0xd6, 0x76, 0xbb, 0x76, 0xf6, 0xf3, 0xb6, 0xd6, 0x95,
	0x13, 0xb2, 0x0b, 0x7a, 0x78, 0x3a, 0x34, 0x70, 0x13, 0x5b, 0x8d, 0xe2, 0x40, 0x0c, 0x5a, 0xdf,
	0x30, 0xdc, 0x12, 0x64, 0x1d, 0x16, 0xfb, 0x4c, 0xd1, 0x10, 0xa8, 0x0d, 0xfa, 0x89, 0xa0, 0xd1,
	0xad, 0xed, 0xae, 0xfc, 0x4d, 0x1e, 0x00, 0x0e, 0x52, 0x03, 0x37, 0x75, 0xab, 0xee, 0xde, 0xb5,
	0xe7, 0x6a, 0xec, 0x45, 0xb4, 0x7d, 0x9c, 0x1e, 0x85, 0x3c, 0x1e, 0x77, 0x71, 0x90, 0x9a, 0xaf,
	0xa1, 0xf1, 0x86, 0xc7, 0xfd, 0xd0, 0x7f, 0x17, 0x7b, 0x51, 0xc4, 0x62, 0x42, 0x61, 0x33, 0x66,
	0xc3, 0x51, 0xca, 0x7a, 0x52, 0xe4, 0x56, 0xa1, 0x45, 0x0d, 0xc5, 0xf9, 0xc9, 0x28, 0xe4, 0x2c,
	0xe4, 0x52, 0xab, 0x32, 0xa1, 0x86, 0xa6, 0x0f, 0x9b, 0x05, 0xbf, 0xb0, 0x14, 0xb0, 0xb1, 0x81,
	0x9a, 0xc8, 0xd2, 0x95, 0xa5, 0x80, 0x8d, 0xc9, 0x01, 0x6c, 0xa4, 0xde, 0xe0, 0x94, 0x19, 0xb8,
	0x89, 0xac, 0xba, 0x7b, 0x7f, 0xa5, 0xd8, 0x8a, 0xba, 0x6e, 0x0e, 0x7c, 0x8c, 0x1f, 0xa1, 0xd6,
	0x1f, 0x0c, 0x37, 0xe4, 0x6d, 0x2f, 0x52, 0xb1, 0xb8, 0x32, 0x02, 0x24, 0x23, 0x68, 0xfd, 0xc3,
	0x7a, 0x79, 0xaf, 0x1c, 0x00, 0x79, 0x08, 0x7a, 0x90, 0xba, 0x45, 0x6e, 0x77, 0x56, 0x82, 0xdc,
	0x1c, 0x25, 0xee, 0x9b, 0x4f, 0x97, 0xda, 0x6c, 0x94, 0x6d, 0x9a, 0x65, 0x9b, 0x2a, 0xa7, 0xb9,
	0x01, 0xf3, 0xc5, 0x92, 0xe8, 0x55, 0xb4, 0x68, 0x49, 0xb4, 0xe5, 0x8a, 0xe8, 0xa5, 0x8a, 0x98,
	0x1f, 0x61, 0x4b, 0x89, 0xbb, 0x52, 0xcc, 0x93, 0x6a, 0xe6, 0xd6, 0x0a, 0xa3, 0x57, 0x26, 0xfe,
	0xbd, 0x06, 0x3b, 0xe2, 0xee, 0xf3, 0x3e, 0x1b, 0xf4, 0x3a, 0x5e, 0x12, 0x94, 0x5a, 0x1d, 0x7a,
	0x43, 0x56, 0x6d, 0xb5, 0x98, 0x90, 0x03, 0xd0, 0x87, 0x89, 0x2f, 0x25, 0xd7, 0x5d, 0x7b, 0xf1,
	0xa3, 0x8b, 0x44, 0xf6, 0x2b, 0x96, 0x70, 0xd6, 0x2b, 0xfe, 0x75, 0x05, 0x94, 0xb4, 0x8b, 0xaa,
	0xeb, 0x72, 0x41, 0xeb, 0x52, 0xe4, 0x4f, 0x63, 0x5f, 0xec, 0xd8, 0x31, 0x6a, 0x92, 0xe2, 0xde,
	0x7f, 0x29, 0x8e, 0x53, 0xe7, 0x72, 0xd3, 0x4e, 0x0e, 0x76, 0x8d, 0x8d, 0x6b, 0x83, 0xcb, 0x35,
	0xd9, 0x87, 0x46, 0x45, 0x10, 0xd9, 0x01, 0x1c, 0x39, 0x32, 0x28, 0xb5, 0x42, 0x1c, 0x39, 0x72,
	0xea, 0x56, 0xde, 0x3e, 0x8e, 0x5c, 0x73, 0x20, 0xf6, 0xea, 0xac, 0x7e, 0x4b, 0x87, 0xd5, 0xbd,
	0xae, 0x9b, 0x4f, 0xa9, 0x8e, 0xed, 0xe5, 0x2d, 0xd2, 0xd7, 0xa8, 0x74, 0xfb, 0x68, 0x32, 0xa5,
	0xda, 0xf9, 0x94, 0x6a, 0x17, 0x53, 0x8a, 0xbe, 0x64, 0x14, 0xfd, 0xc8, 0x28, 0x3a, 0xcb, 0x28,
	0x9a, 0x64, 0x14, 0xfd, 0xca, 0x28, 0xfa, 0x9d, 0x51, 0xed, 0x22, 0xa3, 0xe8, 0xeb, 0x8c, 0x6a,
	0x93, 0x19, 0xd5, 0xce, 0x67, 0x54, 0x7b, 0x7f, 0x73, 0x2f, 0x0a, 0xfc, 0xbd, 0xb9, 0xf0, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x47, 0xe7, 0xeb, 0x75, 0x58, 0x05, 0x00, 0x00,
}

func (this *TestChannelDataMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestChannelDataMessage)
	if !ok {
		that2, ok := that.(TestChannelDataMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *TestMergeMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestMergeMessage)
	if !ok {
		that2, ok := that.(TestMergeMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if this.List[i] != that1.List[i] {
			return false
		}
	}
	if len(this.Kv) != len(that1.Kv) {
		return false
	}
	for i := range this.Kv {
		if !this.Kv[i].Equal(that1.Kv[i]) {
			return false
		}
	}
	return true
}
func (this *TestMergeMessage_StringWrapper) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestMergeMessage_StringWrapper)
	if !ok {
		that2, ok := that.(TestMergeMessage_StringWrapper)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Removed != that1.Removed {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *TestMapMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestMapMessage)
	if !ok {
		that2, ok := that.(TestMapMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Kv) != len(that1.Kv) {
		return false
	}
	for i := range this.Kv {
		if this.Kv[i] != that1.Kv[i] {
			return false
		}
	}
	if len(this.Kv2) != len(that1.Kv2) {
		return false
	}
	for i := range this.Kv2 {
		if !this.Kv2[i].Equal(that1.Kv2[i]) {
			return false
		}
	}
	return true
}
func (this *TestMapMessage_StringWrapper) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestMapMessage_StringWrapper)
	if !ok {
		that2, ok := that.(TestMapMessage_StringWrapper)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *TestFieldMaskMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestFieldMaskMessage)
	if !ok {
		that2, ok := that.(TestFieldMaskMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if len(this.Kv1) != len(that1.Kv1) {
		return false
	}
	for i := range this.Kv1 {
		if !this.Kv1[i].Equal(that1.Kv1[i]) {
			return false
		}
	}
	if len(this.Kv2) != len(that1.Kv2) {
		return false
	}
	for i := range this.Kv2 {
		if this.Kv2[i] != that1.Kv2[i] {
			return false
		}
	}
	return true
}
func (this *TestFieldMaskMessage_NestedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TestFieldMaskMessage_NestedMessage)
	if !ok {
		that2, ok := that.(TestFieldMaskMessage_NestedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.P1 != that1.P1 {
		return false
	}
	if this.P2 != that1.P2 {
		return false
	}
	return true
}
func (this *TestChannelDataMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&channeldpb.TestChannelDataMessage{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestMergeMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&channeldpb.TestMergeMessage{")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	keysForKv := make([]int64, 0, len(this.Kv))
	for k, _ := range this.Kv {
		keysForKv = append(keysForKv, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForKv)
	mapStringForKv := "map[int64]*TestMergeMessage_StringWrapper{"
	for _, k := range keysForKv {
		mapStringForKv += fmt.Sprintf("%#v: %#v,", k, this.Kv[k])
	}
	mapStringForKv += "}"
	if this.Kv != nil {
		s = append(s, "Kv: "+mapStringForKv+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestMergeMessage_StringWrapper) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&channeldpb.TestMergeMessage_StringWrapper{")
	s = append(s, "Removed: "+fmt.Sprintf("%#v", this.Removed)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestMapMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&channeldpb.TestMapMessage{")
	keysForKv := make([]uint32, 0, len(this.Kv))
	for k, _ := range this.Kv {
		keysForKv = append(keysForKv, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForKv)
	mapStringForKv := "map[uint32]string{"
	for _, k := range keysForKv {
		mapStringForKv += fmt.Sprintf("%#v: %#v,", k, this.Kv[k])
	}
	mapStringForKv += "}"
	if this.Kv != nil {
		s = append(s, "Kv: "+mapStringForKv+",\n")
	}
	keysForKv2 := make([]uint32, 0, len(this.Kv2))
	for k, _ := range this.Kv2 {
		keysForKv2 = append(keysForKv2, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForKv2)
	mapStringForKv2 := "map[uint32]*TestMapMessage_StringWrapper{"
	for _, k := range keysForKv2 {
		mapStringForKv2 += fmt.Sprintf("%#v: %#v,", k, this.Kv2[k])
	}
	mapStringForKv2 += "}"
	if this.Kv2 != nil {
		s = append(s, "Kv2: "+mapStringForKv2+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestMapMessage_StringWrapper) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&channeldpb.TestMapMessage_StringWrapper{")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestFieldMaskMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&channeldpb.TestFieldMaskMessage{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	keysForKv1 := make([]int64, 0, len(this.Kv1))
	for k, _ := range this.Kv1 {
		keysForKv1 = append(keysForKv1, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForKv1)
	mapStringForKv1 := "map[int64]*TestFieldMaskMessage_NestedMessage{"
	for _, k := range keysForKv1 {
		mapStringForKv1 += fmt.Sprintf("%#v: %#v,", k, this.Kv1[k])
	}
	mapStringForKv1 += "}"
	if this.Kv1 != nil {
		s = append(s, "Kv1: "+mapStringForKv1+",\n")
	}
	keysForKv2 := make([]int64, 0, len(this.Kv2))
	for k, _ := range this.Kv2 {
		keysForKv2 = append(keysForKv2, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForKv2)
	mapStringForKv2 := "map[int64]string{"
	for _, k := range keysForKv2 {
		mapStringForKv2 += fmt.Sprintf("%#v: %#v,", k, this.Kv2[k])
	}
	mapStringForKv2 += "}"
	if this.Kv2 != nil {
		s = append(s, "Kv2: "+mapStringForKv2+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TestFieldMaskMessage_NestedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&channeldpb.TestFieldMaskMessage_NestedMessage{")
	s = append(s, "P1: "+fmt.Sprintf("%#v", this.P1)+",\n")
	s = append(s, "P2: "+fmt.Sprintf("%#v", this.P2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTest(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TestChannelDataMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestChannelDataMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestChannelDataMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintTest(dAtA, i, uint64(m.Num))
	i--
	dAtA[i] = 0x10
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintTest(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TestMergeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMergeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMergeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kv) > 0 {
		for k := range m.Kv {
			v := m.Kv[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTest(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTest(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintTest(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestMergeMessage_StringWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMergeMessage_StringWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMergeMessage_StringWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Content)
	copy(dAtA[i:], m.Content)
	i = encodeVarintTest(dAtA, i, uint64(len(m.Content)))
	i--
	dAtA[i] = 0x12
	i--
	if m.Removed {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TestMapMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMapMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMapMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kv2) > 0 {
		for k := range m.Kv2 {
			v := m.Kv2[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTest(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTest(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Kv) > 0 {
		for k := range m.Kv {
			v := m.Kv[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTest(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintTest(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestMapMessage_StringWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestMapMessage_StringWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestMapMessage_StringWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintTest(dAtA, i, uint64(m.Num))
	i--
	dAtA[i] = 0x10
	i -= len(m.Content)
	copy(dAtA[i:], m.Content)
	i = encodeVarintTest(dAtA, i, uint64(len(m.Content)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TestFieldMaskMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestFieldMaskMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestFieldMaskMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kv2) > 0 {
		for k := range m.Kv2 {
			v := m.Kv2[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTest(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintTest(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Kv1) > 0 {
		for k := range m.Kv1 {
			v := m.Kv1[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTest(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTest(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Msg == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("msg")
	} else {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintTest(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TestFieldMaskMessage_NestedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestFieldMaskMessage_NestedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestFieldMaskMessage_NestedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintTest(dAtA, i, uint64(m.P2))
	i--
	dAtA[i] = 0x10
	i = encodeVarintTest(dAtA, i, uint64(m.P1))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestChannelDataMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovTest(uint64(l))
	n += 1 + sovTest(uint64(m.Num))
	return n
}

func (m *TestMergeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if len(m.Kv) > 0 {
		for k, v := range m.Kv {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTest(uint64(l))
			}
			mapEntrySize := 1 + sovTest(uint64(k)) + l
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TestMergeMessage_StringWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Content)
	n += 1 + l + sovTest(uint64(l))
	return n
}

func (m *TestMapMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Kv) > 0 {
		for k, v := range m.Kv {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTest(uint64(k)) + 1 + len(v) + sovTest(uint64(len(v)))
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.Kv2) > 0 {
		for k, v := range m.Kv2 {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTest(uint64(l))
			}
			mapEntrySize := 1 + sovTest(uint64(k)) + l
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TestMapMessage_StringWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	n += 1 + l + sovTest(uint64(l))
	n += 1 + sovTest(uint64(m.Num))
	return n
}

func (m *TestFieldMaskMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovTest(uint64(l))
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTest(uint64(l))
		}
	}
	if len(m.Kv1) > 0 {
		for k, v := range m.Kv1 {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTest(uint64(l))
			}
			mapEntrySize := 1 + sovTest(uint64(k)) + l
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.Kv2) > 0 {
		for k, v := range m.Kv2 {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTest(uint64(k)) + 1 + len(v) + sovTest(uint64(len(v)))
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TestFieldMaskMessage_NestedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovTest(uint64(m.P1))
	n += 1 + sovTest(uint64(m.P2))
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TestChannelDataMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TestChannelDataMessage{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TestMergeMessage) String() string {
	if this == nil {
		return "nil"
	}
	keysForKv := make([]int64, 0, len(this.Kv))
	for k, _ := range this.Kv {
		keysForKv = append(keysForKv, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForKv)
	mapStringForKv := "map[int64]*TestMergeMessage_StringWrapper{"
	for _, k := range keysForKv {
		mapStringForKv += fmt.Sprintf("%v: %v,", k, this.Kv[k])
	}
	mapStringForKv += "}"
	s := strings.Join([]string{`&TestMergeMessage{`,
		`List:` + fmt.Sprintf("%v", this.List) + `,`,
		`Kv:` + mapStringForKv + `,`,
		`}`,
	}, "")
	return s
}
func (this *TestMergeMessage_StringWrapper) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TestMergeMessage_StringWrapper{`,
		`Removed:` + fmt.Sprintf("%v", this.Removed) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TestMapMessage) String() string {
	if this == nil {
		return "nil"
	}
	keysForKv := make([]uint32, 0, len(this.Kv))
	for k, _ := range this.Kv {
		keysForKv = append(keysForKv, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForKv)
	mapStringForKv := "map[uint32]string{"
	for _, k := range keysForKv {
		mapStringForKv += fmt.Sprintf("%v: %v,", k, this.Kv[k])
	}
	mapStringForKv += "}"
	keysForKv2 := make([]uint32, 0, len(this.Kv2))
	for k, _ := range this.Kv2 {
		keysForKv2 = append(keysForKv2, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForKv2)
	mapStringForKv2 := "map[uint32]*TestMapMessage_StringWrapper{"
	for _, k := range keysForKv2 {
		mapStringForKv2 += fmt.Sprintf("%v: %v,", k, this.Kv2[k])
	}
	mapStringForKv2 += "}"
	s := strings.Join([]string{`&TestMapMessage{`,
		`Kv:` + mapStringForKv + `,`,
		`Kv2:` + mapStringForKv2 + `,`,
		`}`,
	}, "")
	return s
}
func (this *TestMapMessage_StringWrapper) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TestMapMessage_StringWrapper{`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TestFieldMaskMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForList := "[]*TestFieldMaskMessage_NestedMessage{"
	for _, f := range this.List {
		repeatedStringForList += strings.Replace(fmt.Sprintf("%v", f), "TestFieldMaskMessage_NestedMessage", "TestFieldMaskMessage_NestedMessage", 1) + ","
	}
	repeatedStringForList += "}"
	keysForKv1 := make([]int64, 0, len(this.Kv1))
	for k, _ := range this.Kv1 {
		keysForKv1 = append(keysForKv1, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForKv1)
	mapStringForKv1 := "map[int64]*TestFieldMaskMessage_NestedMessage{"
	for _, k := range keysForKv1 {
		mapStringForKv1 += fmt.Sprintf("%v: %v,", k, this.Kv1[k])
	}
	mapStringForKv1 += "}"
	keysForKv2 := make([]int64, 0, len(this.Kv2))
	for k, _ := range this.Kv2 {
		keysForKv2 = append(keysForKv2, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForKv2)
	mapStringForKv2 := "map[int64]string{"
	for _, k := range keysForKv2 {
		mapStringForKv2 += fmt.Sprintf("%v: %v,", k, this.Kv2[k])
	}
	mapStringForKv2 += "}"
	s := strings.Join([]string{`&TestFieldMaskMessage{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "TestFieldMaskMessage_NestedMessage", "TestFieldMaskMessage_NestedMessage", 1) + `,`,
		`List:` + repeatedStringForList + `,`,
		`Kv1:` + mapStringForKv1 + `,`,
		`Kv2:` + mapStringForKv2 + `,`,
		`}`,
	}, "")
	return s
}
func (this *TestFieldMaskMessage_NestedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TestFieldMaskMessage_NestedMessage{`,
		`P1:` + fmt.Sprintf("%v", this.P1) + `,`,
		`P2:` + fmt.Sprintf("%v", this.P2) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTest(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TestChannelDataMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestChannelDataMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestChannelDataMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("text")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("num")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMergeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestMergeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestMergeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kv == nil {
				m.Kv = make(map[int64]*TestMergeMessage_StringWrapper)
			}
			var mapkey int64
			var mapvalue *TestMergeMessage_StringWrapper
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTest
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTest
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TestMergeMessage_StringWrapper{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Kv[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMergeMessage_StringWrapper) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("removed")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("content")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMapMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestMapMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestMapMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kv == nil {
				m.Kv = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Kv[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kv2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kv2 == nil {
				m.Kv2 = make(map[uint32]*TestMapMessage_StringWrapper)
			}
			var mapkey uint32
			var mapvalue *TestMapMessage_StringWrapper
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTest
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTest
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TestMapMessage_StringWrapper{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Kv2[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestMapMessage_StringWrapper) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("content")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("num")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestFieldMaskMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestFieldMaskMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestFieldMaskMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &TestFieldMaskMessage_NestedMessage{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &TestFieldMaskMessage_NestedMessage{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kv1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kv1 == nil {
				m.Kv1 = make(map[int64]*TestFieldMaskMessage_NestedMessage)
			}
			var mapkey int64
			var mapvalue *TestFieldMaskMessage_NestedMessage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTest
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTest
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TestFieldMaskMessage_NestedMessage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Kv1[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kv2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kv2 == nil {
				m.Kv2 = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTest
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Kv2[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("msg")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestFieldMaskMessage_NestedMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NestedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NestedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field P1", wireType)
			}
			m.P1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.P1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2", wireType)
			}
			m.P2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.P2 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("p1")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("p2")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
